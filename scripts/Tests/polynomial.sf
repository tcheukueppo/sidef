#!/usr/bin/ruby

# Tests for the Polynomial() class

func faulhaber_formula(p) {
    (p+1).of { |j|
        Poly(p - j + 1) * bernoulli(j) * binomial(p+1, j)
    }.sum / (p+1)
}

assert_eq(
    faulhaber_formula(19),
    Polynomial(2 => 43867/84, 4 => -68723/40, 6 => 2261, 8 => -223193/140, 10 => 4199/6, 12 => -4199/20, 14 => 323/7, 16 => -323/40, 18 => 19/12, 19 => 1/2, 20 => 1/20)
)

assert_eq(
    faulhaber_formula(20),
    Polynomial(1 => -174611/330, 3 => 219335/63, 5 => -68723/10, 7 => 6460, 9 => -223193/63, 11 => 41990/33, 13 => -323, 15 => 1292/21, 17 => -19/2, 19 => 5/3, 20 => 1/2, 21 => 1/21)
)

assert_eq(
    faulhaber_formula(20).to_s,
    "1/21*x^21 + 1/2*x^20 + 5/3*x^19 - 19/2*x^17 + 1292/21*x^15 - 323*x^13 + 41990/33*x^11 - 223193/63*x^9 + 6460*x^7 - 68723/10*x^5 + 219335/63*x^3 - 174611/330*x"
)

with (Poly([1,2,3,4])) {|p|

    assert_eq(
        p / 42,
        Polynomial(0 => 2/21, 1 => 1/14, 2 => 1/21, 3 => 1/42)
    )

    assert_eq(
        42 * p,
        p * 42,
    )

    assert_ne(
        42 * p,
        43 * p,
    )

    assert_eq(
        p.mul(42),
        p.mul(Poly(0 => 42))
    )

    assert_eq(
        p.mul(42),
        Polynomial(0 => 168, 1 => 126, 2 => 84, 3 => 42)
    )

    assert_eq(
        42 - p,
        Polynomial(0 => 38, 1 => -3, 2 => -2, 3 => -1)
    ),

    assert_eq(
        p - 42,
        p.sub(Poly(0 => 42))
    )

    assert_eq(
        42 + p,
        Polynomial(0 => 46, 1 => 3, 2 => 2, 3 => 1)
    )

    assert_eq(
        p + 42,
        p.add(Poly(0 => 42))
    )

    assert_eq(Poly(3 => 10) + Poly(0 => 42), Poly(0 => +42, 3 => 10))
    assert_eq(Poly(3 => 10) - Poly(0 => 42), Poly(0 => -42, 3 => 10))

    assert_eq(lift(Mod(p, 97)**10) <=> p.powmod(10, 97), 0)
    assert_eq(p**3 <=> p**2, 1)
    assert_eq(p**2 <=> p**3, -1)

    assert_eq(
        p % 3,
        Polynomial(0 => 1, 2 => 2, 3 => 1)
    )

    assert_eq(p % 3 -> to_s, "x^3 + 2*x^2 + 1")

    assert_eq(
        Poly([0,0,5]),
        5
    )

    assert_ne(
        lift(Mod(Poly([1,2,3]), 97)**10),
        Poly([1,2,3]).powmod(11, 97)
    )

    assert_eq(
        lift(Mod(Poly([1,2,3]), 97)**10),
        Poly([1,2,3]).powmod(10, 97)
    )
}

assert_eq(
    Poly([1,2,3]) + Poly([3,4,5,6]),
    Polynomial(0 => 9, 1 => 7, 2 => 5, 3 => 3)
)

assert_eq(
    Poly([1,2,3]) - Poly([3,4,5,6]),
    Polynomial(0 => -3, 1 => -3, 2 => -3, 3 => -3)
)

assert_eq(
    Poly([1,2,3]) * Poly([3,4,5,6]),
    Polynomial(0 => 18, 1 => 27, 2 => 28, 3 => 22, 4 => 10, 5 => 3)
)

assert_eq(
    Poly([3,4,3+4i, 9]).to_s,
    "3*x^3 + 4*x^2 + (3+4i)*x + 9"
)

assert_eq(
    Polynomial(5).to_s,
    'x^5'
)

assert_eq(
    Polynomial([1,2,3,4]).to_s,
    'x^3 + 2*x^2 + 3*x + 4'
)

assert_eq(
    Polynomial(5 => 3, 2 => 10).to_s,
    '3*x^5 + 10*x^2'
)

assert_eq(
    Poly([3,Quadratic(3,4,5),5]).eval(17),
    3*17**2 + Quadratic(3,4,5)*17 + 5
)

assert_eq(
    faulhaber_formula(11).eval(1000),
    1000.faulhaber(11)
)

assert_eq(
    faulhaber_formula(20).eval(12345),
    12345.faulhaber(20)
)

say "** Test passed!"
