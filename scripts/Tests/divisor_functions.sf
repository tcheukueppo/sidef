#!/usr/bin/ruby

# Tests for various Number divisor functions.

var n = irand(3,10)!

var h = Hash(
    divisors => 'sigma',
    prime_divisors => 'prime_sigma',
    prime_power_divisors => 'prime_power_sigma',
    square_divisors => 'square_sigma',
    squarefree_divisors => 'squarefree_sigma',

    udivisors => 'usigma',
    prime_udivisors => 'prime_usigma',
    prime_power_udivisors => 'prime_power_usigma',
    square_udivisors => 'square_usigma',
    squarefree_udivisors => 'squarefree_usigma',
)

for k in (0..5) {
    h.each {|a,b|
        assert_eq(n.(a).sum {|d| d**k }, n.(b)(k), "#{a} != #{b} for n=#{n} and k=#{k}")
    }
}

with (10!) {|n|
    var D = n.divisors
    assert_eq(n.power_divisors,    D.grep{.is_power})
    assert_eq(n.power_divisors(1), D.grep{.is_power(1)})
    assert_eq(n.power_divisors(2), D.grep{.is_power(2)})
    assert_eq(n.power_divisors(3), D.grep{.is_power(3)})
    assert_eq(n.power_divisors(4), D.grep{.is_power(4)})
    assert_eq(n.power_divisors(5), D.grep{.is_power(5)})
    assert_eq(n.power_divisors(9), D.grep{.is_power(9)})
}

with (21!) {|n|
    var D = n.udivisors
    assert_eq(n.power_udivisors,    D.grep{.is_power})
    assert_eq(n.power_udivisors(1), D.grep{.is_power(1)})
    assert_eq(n.power_udivisors(2), D.grep{.is_power(2)})
    assert_eq(n.power_udivisors(3), D.grep{.is_power(3)})
    assert_eq(n.power_udivisors(4), D.grep{.is_power(4)})
    assert_eq(n.power_udivisors(5), D.grep{.is_power(5)})
    assert_eq(n.power_udivisors(9), D.grep{.is_power(9)})
}

for n in (0..50) {
    var D1 = n.divisors
    var D2 = n.udivisors

    assert_eq(n.power_divisors,    D1.grep { .is_power })
    assert_eq(n.power_divisors(1), D1.grep { .is_power(1) })
    assert_eq(n.power_divisors(2), D1.grep { .is_power(2) })
    assert_eq(n.power_divisors(3), D1.grep { .is_power(3) })

    assert_eq(n.power_udivisors,    D2.grep { .is_power })
    assert_eq(n.power_udivisors(1), D2.grep { .is_power(1) })
    assert_eq(n.power_udivisors(2), D2.grep { .is_power(2) })
    assert_eq(n.power_udivisors(3), D2.grep { .is_power(3) })
}

assert_eq(5040.sigma(-1), 5040.divisors.sum {|d| d**(-1) })
assert_eq( 10!.sigma(-2),  10!.divisors.sum {|d| d**(-2) })

do {

    var n = 5040
    var D = n.divisors

    for k in (0..4) {
        assert_eq(k.powerfree_divisors(n), D.grep{ .is_powerfree(k) })
    }
}

say "** Test passed!"
