#!/usr/bin/ruby

define EXTRA = true
define UPTO = nil

var t0 = Time.micro

var n1 = (2**128 - 1)*(2**256 - 1)
var n2 = (2**128 - 1)*(3**128 - 1)
var n3 = (5**48 + 1)*(3**120 + 1)
var n4 = (5**48 + 1)*(3**120 - 1)
var n5 = (5**48 - 1)*(3**120 + 1)

var f1 = n1.cop_factor(UPTO)
var f2 = n2.cop_factor(UPTO)
var f3 = n3.cop_factor(UPTO)
var f4 = n4.cop_factor(UPTO)
var f5 = n5.cop_factor(UPTO)

for k in (1..5) {

    var f = eval("f#{k}")
    var n = eval("n#{k}")

    assert_eq(f.prod, n)
    assert(f.all {|d| d `divides` n })
}

#~ for k in (1..5) {
    #~ say %Q<assert_eq(f#{k}, %n#{eval("f#{k}").dump})>
#~ }

assert_eq(f1, %n[3, 3, 5, 5, 17, 17, 257, 257, 641, 641, 65537, 65537, 274177, 274177, 6700417, 6700417, 67280421310721, 67280421310721, 340282366920938463463374607431768211457])
assert_eq(f2, %n[2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 5, 5, 17, 17, 41, 193, 257, 641, 65537, 6700417, 21523361, 926510094425921, 18446744073709551617, 1716841910146256242328924544641])
assert_eq(f3, %n[2, 2, 17, 97, 97, 193, 577, 769, 2593, 4801, 13921, 14401, 29423041, 128653413121, 240031591394168814433, 51383579021948491809121])
assert_eq(f4, %n[2, 2, 2, 2, 2, 2, 5, 5, 7, 11, 11, 13, 31, 41, 61, 73, 97, 241, 271, 1181, 2593, 4561, 6481, 29423041, 42521761, 47763361, 7783790252881, 240031591394168814433])
assert_eq(f5, %n[2, 2, 2, 2, 2, 2, 2, 3, 3, 7, 13, 17, 17, 31, 97, 193, 313, 577, 601, 769, 4801, 11489, 13921, 14401, 390001, 128653413121, 152587500001, 51383579021948491809121])

if (EXTRA) {
    var n5 = (3631221**165 + 1)
    var n6 = (3631221**165 - 1)

    var n1 = (45**120 + 35**420)
    var n2 = abs(45**120 - 35**420)

    var f1 = n1.cop_factor(64)
    var f2 = n2.cop_factor(64)

    var f5 = n5.cop_factor(64)
    var f6 = n6.cop_factor(64)

    assert_eq(f1.prod, n1)
    assert_eq(f2.prod, n2)

    assert_eq(f5.prod, n5)
    assert_eq(f6.prod, n6)

    assert(f1.all {|d| d `divides` n1 })
    assert(f2.all {|d| d `divides` n2 })

    assert(f5.all {|d| d `divides` n5 })
    assert(f6.all {|d| d `divides` n6 })

    assert_eq(f1, %n[2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17, 41, 89, 401, 2153, 68113, 6733366494796811534186577371257, 28252729099302981243422110650064583243057595987168733494677444903033857, 225243672203977122688123183792053229780533830473295955702082043419502621410300378982513675859370313918642701599809589519542989668289986905668947241, 13713921429569823875786204458267288388079206511872648063066405028197111588765216953339638394874928588230656097864488442245113896568173698894738929766319978093013471394417343267192576916637610623147561687948661063244152947533800829442594907765001892967094587214308463157186258041227481422598106734096961])
    assert_eq(f2, %n[2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 13, 31, 61, 151, 269, 313, 449, 541, 1237, 643392989, 1286785897, 17106398310481, 27418518623753, 941742071282767, 26410435399672218267623095693708961, 43867734579538298160082922884183671721, 43867735960221215598799390160530821721, 31547182576079050084395601762662184875338828850620179917021538251716722981, 62076712147528903654813667484621469944334740749526492609958011907963506511, 1924378197708251909567196753392432348594387107712726618137231240213821501841, 3703231214705591542528761517137978709723409276572987682889798350464149957717983021812837810319706589010422323508916108163492698766847770440250661589281])

    assert_eq(f5, %n[2, 7, 181, 331, 661, 1433, 13185762319621, 173864375829940824812120041, 30228846156838256210511440142326232848844943880264881, 1204200214057091974527480506205908123158430272423138239481784671, 158874335275467319099957265506522755242522210556559902604003435330714452293772939696741312780606752766529319735531554528571807098201, 25241047458103102815299367149600345172908463776968654615130975523110648827816140619812060045429054791478096601018535845777189486187528077970802971347348843791667082955712548886611255840387162495645480876783822416704627892986446707357862988247947789468307094284401, 963857716220828203169173333178746498692602210740627956928715469098217523528659060929737995924206287115350312328177368394579614133648945745676182504270315026338625952971197727250494748724378748849885134826745513094788375448381440338031371330004650115512989413906801231245035328776723675914728361683646430620717324586573392822248065192131348223751997642062150964415464564658802780558444237491997958710993940433421417548261275179607812702882712672002825215513260891262316530318237976482536954554446822317784729495478515123741])
    assert_eq(f6, %n[2, 2, 5, 5, 13, 23, 31, 47, 61, 67, 991, 2311, 2377, 3301, 7393, 2072026518143, 35088692551120336705751, 30228829507431441184625567610590352749934026714946481, 258657034645086909065749707486038736036578981520922977471575771, 9040732499455036695030670416875080461835960765075141113468454893564504581975426578645676640302809463157879535859628343070641, 25241033555869938275591899360868615510675659515205450795465840137865272119599438215088709620057067535625435984185150412832652443830661610143593973378209837689121652443422845601659719411688959626095770376704344216755869575501932955514241339247047862936010468268401, 83515898415687716415607147549049699848866371950355533764851977404448285231604421122658940453785585506417005270399847714583244231982008915766281174219313514060493389737272256470701693567363914456338011917982229803551046421848706971066092515645936728260550495746437954451037195854235205978164483307497139697535163047086815838979156801539441058943554249389938389890878832294417268147929018136236254802001019462437902547152777419828842391531137857962212159283938761236537187557101002212005744483847547994127826836406209291])
}

say "** Test passed -- took #{Time.micro - t0} seconds!"

__END__
** Test passed -- took 1.51473 seconds!
** Test passed -- took 1.49089 seconds!
** Test passed -- took 0.55667 seconds!
** Test passed -- took 0.81308 seconds!
** Test passed -- took 1.23695 seconds!
