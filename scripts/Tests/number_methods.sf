#!/usr/bin/ruby

# Tests for some Number methods.

assert_eq(squarefree_sum(1e6), 303961062910)
assert_eq(squarefree_sum(1e7), 30396557311887)

assert_eq(squarefree_count(1e9), 607927124)
assert_eq(squarefree_count(1e10), 6079270942)

for k in (0..10) {

    assert_eq(k.almost_primes(1000), 1..1000 -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(1000), 1..1000 -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(1000), k.almost_primes(1, 1000).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(1000, { take(_) }) }, k.almost_primes(1000))
    assert_eq(gather { k.omega_primes_each(1000, { take(_) }) }, k.omega_primes(1000))
    assert_eq(gather { k.squarefree_almost_primes_each(1000, { take(_) }) }, k.squarefree_almost_primes(1000))

    var from = 1000.irand
    var upto = from+1000.irand

    assert_eq(k.almost_primes(from, upto), from..upto -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), k.almost_primes(from, upto).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(from, upto, { take(_) }) }, k.almost_primes(from, upto))
    assert_eq(gather { k.omega_primes_each(from, upto, { take(_) }) }, k.omega_primes(from, upto))
    assert_eq(gather { k.squarefree_almost_primes_each(from, upto, { take(_) }) }, k.squarefree_almost_primes(from, upto))
}

if (Number.HAS_PRIME_UTIL) {
    with (2**65) {|n|

        assert_eq(1.almost_primes(n, n+100), range(n, n+100).grep{.is_prime})
        assert_eq(1.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_prime})

        assert_eq(gather { 1.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(1)})
        assert_eq(gather { 1.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).primes)

        assert_eq(2.almost_primes(n, n+100), range(n, n+100).grep{.is_semiprime})
        assert_eq(2.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_squarefree && .is_semiprime})

        assert_eq(gather { 2.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(2)})
        assert_eq(gather { 2.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_squarefree && .is_almost_prime(2)})
    }
}

for k in (1..12) {
    var n = k.pn_primorial

    #say "Testing: #{k} -> #{n}"

    var from = n-100
    var upto = n+100

    assert_eq(k.almost_primes(from, upto), from..upto -> grep{ .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), from..upto -> grep{ .is_squarefree && .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep{ .is_omega_prime(k) })
}

# RangeNumber k-almost primes

assert_eq(
    gather { 10..100 -> each_almost_prime(2, {|k| take(k) }) },
    2.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(2, {|k| take(k) }) },
    2.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_almost_prime(3, {|k| take(k) }) },
    3.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_omega_prime(3, {|k| take(k) }) },
    3.omega_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    3.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(3) }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_omega_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_omega_prime(3) }
)

assert_eq(
    gather { 10..200 `by` 3 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    10..200 `by` 3 -> grep { .is_almost_prime(3) && .is_squarefree }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(2, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(2) }
)

# RangeNumber k-powerful numbers

assert_eq(
    gather { 10..1000 -> each_powerful(2, {|k| take(k) }) },
    2.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 -> each_powerful(3, {|k| take(k) }) },
    3.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(3, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(3) }
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(2, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(2) }
)

# RangeNumber squarefree numbers

assert_eq(
    gather { 10..100 -> each_squarefree {|k| take(k) } },
    squarefree(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_squarefree {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_squarefree }
)

# RangeNumber prime numbers

assert_eq(
    gather { 10..100 -> each_prime {|k| take(k) } },
    primes(10, 100)
)

assert_eq(
    gather { 1..100 -> each_prime {|k| take(k) } },
    primes(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_prime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_prime }
)

# RangeNumber composite numbers

assert_eq(
    gather { 10..100 -> each_composite {|k| take(k) } },
    composites(10, 100)
)

assert_eq(
    gather { 1..100 -> each_composite {|k| take(k) } },
    composites(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_composite {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_composite }
)

# RangeNumber semiprime numbers

assert_eq(
    gather { 10..100 -> each_semiprime {|k| take(k) } },
    semiprimes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_semiprime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_semiprime }
)

# Counting methods

for k in (1..4) {

    var n = irand(50, 100)

    assert_eq(k.omega_prime_count(n), 1..n -> count { .is_omega_prime(k) })
    assert_eq(k.almost_prime_count(n), 1..n -> count { .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_prime_count(n), 1..n -> count { .is_squarefree && .is_almost_prime(k) })

    n = irand(100, 1000)

    assert_eq(k.omega_prime_count(n), k.omega_primes(n).len)
    assert_eq(k.almost_prime_count(n), k.almost_primes(n).len)
    assert_eq(k.squarefree_almost_prime_count(n), k.squarefree_almost_primes(n).len)
}

assert_eq(2.almost_primes(50, 100).len, 2.almost_primepi(50, 100))
assert_eq(2.almost_primes(10, 106).len, 2.almost_primepi(10, 106))
assert_eq(2.almost_primes(50, 106).len, 2.almost_primepi(50, 106))
assert_eq(3.almost_primes(50, 106).len, 3.almost_primepi(50, 106))
assert_eq(3.almost_primes(49, 105).len, 3.almost_primepi(49, 105))

assert_eq(2.omega_primes(50, 100).len, 2.omega_prime_count(50, 100))
assert_eq(2.omega_primes(10, 106).len, 2.omega_prime_count(10, 106))
assert_eq(2.omega_primes(50, 106).len, 2.omega_prime_count(50, 106))
assert_eq(3.omega_primes(50, 106).len, 3.omega_prime_count(50, 106))
assert_eq(3.omega_primes(49, 105).len, 3.omega_prime_count(49, 105))

assert_eq(2.squarefree_almost_primes(50, 100).len, 2.squarefree_almost_prime_count(50, 100))
assert_eq(2.squarefree_almost_primes(10, 106).len, 2.squarefree_almost_prime_count(10, 106))
assert_eq(2.squarefree_almost_primes(50, 106).len, 2.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(50, 106).len, 3.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(49, 105).len, 3.squarefree_almost_prime_count(49, 105))

for k in (1..4) {

    var a = irand(50, 100)
    var b = irand(a, 150)

    assert_eq(k.omega_primes(a,b), range(a,b).grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(a,b), range(a,b).grep { .is_squarefree && .is_almost_prime(k) })
}

assert_eq(2.powerful(50, 100).len, 2.powerful_count(50, 100))
assert_eq(2.powerful(10, 106).len, 2.powerful_count(10, 106))
assert_eq(2.powerful(50, 106).len, 2.powerful_count(50, 106))
assert_eq(3.powerful(50, 106).len, 3.powerful_count(50, 106))
assert_eq(3.powerful(49, 105).len, 3.powerful_count(49, 105))

# Almost prime divisors

assert_eq(5040.almost_prime_divisors.flat.sort, 5040.divisors)
assert_eq(5040.omega_prime_divisors.flat.sort, 5040.divisors)

do {

    var small_k_omega_primes = [
      %n[1],
      %n[2,3,4,5,7,8,9,11,13,16,17,19,23,25,27,29,31,32,37,41,43,47,49,53,59,61,64,67,71,73,79,81,83,89,97,101,103,107,109,113],
      %n[6,10,12,14,15,18,20,21,22,24,26,28,33,34,35,36,38,39,40,44,45,46,48,50,51,52,54,55,56,57,58,62,63,65,68,69,72,74,75,76],
      %n[30,42,60,66,70,78,84,90,102,105,110,114,120,126,130,132,138,140,150,154,156,165,168,170,174,180,182,186,190,195,198,204,220,222,228,230,231,234,238,240],
      %n[210,330,390,420,462,510,546,570,630,660,690,714,770,780,798,840,858,870,910,924,930,966,990,1020,1050,1092,1110,1122,1140,1155,1170,1190,1218,1230,1254,1260,1290,1302,1320,1326],
      %n[2310,2730,3570,3990,4290,4620,4830,5460,5610,6006,6090,6270,6510,6630,6930,7140,7410,7590,7770,7854,7980,8190,8580,8610,8778,8970,9030,9240,9282,9570,9660,9690,9870,10010,10230,10374,10626,10710,10920,11130],
    ]

    small_k_omega_primes.each_kv {|k,v|
        assert_eq(k.omega_primes(v[-1]), v)
        assert_eq(gather { k.omega_primes_each(v[0], v[-1], { take(_) }) }, v)
    }
}

do {

    var (x1, x2) = iquadratic_formula(161022, 770228, -1589768114)

    assert_eq(x1, 97)
    assert_eq(x2, -102)

    var tests = [
        [6, 11, -35],
        [2, -4, -2],
        [-4, -7, 12],
        [20, -15, -10],
        [1, -1, -3],
        [-1, 6, 18],
    ]

    for a,b,c in (tests) {
        var roots = [quadratic_formula(a,b,c)]
        var rootsQ = [quadratic_formulaQ(a,b,c)]

        assert_eq(roots.len, 2)
        assert_eq(rootsQ.len, 2)

        assert(roots.all {|x|
            a*x**2 + b*x + c -> round(-30) =~= 0
        })

        assert(rootsQ.all {|x|
            assert_eq(a*x**2 + b*x + c, 0)
        })
    }
}

do {

    var tests = [
        [1, -6, 11, -6],
        [1, -23, 142, -120],
        [5, 2, -5, -3],
        [1, 4, 6, 5],
        [1, 5, 2, -8],
        [1, 4, 7, 6],
        [-36, 8, -82, 2850986],
        [15, -22, 8, -7520940423059310542039581],
    ]

    for a,b,c,d in (tests) {
        var roots = [cubic_formula(a,b,c,d)]
        assert_eq(roots.len, 3)
        assert(roots.all {|x|
            a*x**3 + b*x**2 + c*x + d -> round(-30) =~= 0
        })
    }
}

do {
    var m = (2**16 + 1)

    # OEIS: A020500
    var x1  = %n[0, 0, 2, 3, 2, 5, 1, 7, 2, 3, 1, 11, 1, 13, 1, 1, 2, 17, 1, 19, 1, 1, 1, 23, 1, 5, 1, 3, 1, 29, 1, 31, 2, 1, 1, 1, 1, 37, 1, 1, 1, 41, 1, 43, 1, 1, 1, 47, 1, 7, 1, 1, 1, 53, 1, 1, 1, 1, 1, 59, 1, 61, 1, 1, 2, 1, 1, 67, 1, 1, 1, 71, 1, 73, 1, 1, 1, 1, 1, 79, 1, 3, 1, 83, 1, 1, 1, 1, 1, 89, 1, 1, 1, 1, 1, 1, 1, 97, 1, 1]

    # OEIS: A020513
    var xn1 = %n[0, -2, 0, 1, 2, 1, 3, 1, 2, 1, 5, 1, 1, 1, 7, 1, 2, 1, 3, 1, 1, 1, 11, 1, 1, 1, 13, 1, 1, 1, 1, 1, 2, 1, 17, 1, 1, 1, 19, 1, 1, 1, 1, 1, 1, 1, 23, 1, 1, 1, 5, 1, 1, 1, 3, 1, 1, 1, 29, 1, 1, 1, 31, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 37, 1, 1, 1, 1, 1, 1, 1, 41, 1, 1, 1, 43, 1, 1, 1, 1, 1, 1, 1, 47, 1, 1, 1, 7, 1]

    assert_eq(100.of {|n| cyclotomic(n, 1) }, x1)
    assert_eq(100.of {|n| cyclotomicmod(n, 1, 29) }, x1.map{_ % 29})

    assert_eq(100.of {|n| cyclotomic(n, -1) }, xn1)
    assert_eq(100.of {|n| cyclotomicmod(n, -1, 29) }, xn1.map {_ % 29})

    for n in (-1 .. 10), x in (-10 .. 10) {
        assert_eq(Str(cyclotomic(n, x) % m), Str(cyclotomicmod(n, x, m)))
    }

    assert_eq(cyclotomicmod(2**127 - 1, 2, 2**127 - 1), 1)
    assert_eq(cyclotomicmod(2**127 - 1, 2*3*5, 2**127 - 1), 1)
    assert_eq(cyclotomicmod(2**127 - 1, 2**127 - 1, 2**127 - 1), 1)

    assert_eq(cyclotomicmod(2**64 + 1, 5040, 503*863), 287421)
    assert_eq(cyclotomicmod(2**64 + 1, -5040, 503*863), cyclotomicmod(2**64 + 1, (-5040)%(503*863), 503*863))

    assert_eq(cyclotomicmod(7!, 5040, 2**128 + 1), 235744758223530422383203401596174491694)
    assert_eq(cyclotomicmod(30!, 5040, 2**128 + 1), 40675970320518606495224484019728682382)

    assert_eq(cyclotomicmod(2**128 - 1, 5040, 2**128 + 1), 258216496104743231120502200247009922076)
    assert_eq(cyclotomicmod(5040*5704689200685129054721, 2**256 + 1, 2**64 + 1), 1)
    assert_eq(cyclotomicmod(5040*5704689200685129054721, next_prime(2**64), prev_prime(2**64)), 385968771661381427)
}

do {
    assert(%n[294409, 167979421, 1152091655881, 62411762908817281, 1516087654274358001].all{.is_imprimitive_carmichael})
    assert(42310088783100741554666880481.is_imprimitive_carmichael)
    assert(21593590390253023722267234622513201.is_imprimitive_carmichael)
    assert(16412975107923138847512341751620644377601.is_imprimitive_carmichael)
    assert(325533792014488126487416882038879701391121.is_imprimitive_carmichael)
    assert(1605045791181700950034233564955898780122791301414374937801.is_imprimitive_carmichael)
}

do {
    with (%n[341, 294409, 9972894583, 1264022137981459, 14054662152215842621]) {|a|
        assert(a.all {.is_super_psp})
        assert(a.none{.is_over_psp})
    }
    assert(192463418472849397730107809253922101.is_super_psp)
    assert(1347320741392600160214289343906212762456021.is_super_psp)
    assert(70865138168006643427403953978871929070133095474701.is_super_psp)
    assert(3363391752747838578311772729701478698952546288306688208857.is_super_psp)
    assert(132153369641266990823936945628293401491197666138621036175881960329.is_super_psp)
    assert(9105096650335639994239038954861714246150666715328403635257215036295306537.is_super_psp)
}

do {
    for n in (2047, 13421773, 14073748835533, 1376414970248942474729, 48663264978548104646392577273, 294413417279041274238472403168164964689, 98117433931341406381352476618801951316878459720486433149, 1252977736815195675988249271013258909221812482895905512953752551821) {
        assert(n.is_psp)
        assert(n.is_over_psp)
        assert(n.is_strong_psp)
        assert(n.is_super_psp)
        assert(n.is_euler_psp)
        assert(!n.is_pell_psp)
        assert(!n.is_fib_psp)
        assert(!n.is_carmichael)
        assert(!n.is_lucas_psp)
        assert(!n.is_lucas_carmichael)
        assert(!n.is_imprimitive_carmichael)
    }
}

do {
    {|n| assert_eq(mbe_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(flt_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(dop_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(cop_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(fermat_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(holf_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(pm1_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(pp1_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(chebyshev_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(ecm_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(squfof_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(qs_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(trial_factor(n).prod, n||1) }.each(0..30)
    {|n| assert_eq(cyclotomic_factor(n).prod, n||1) }.each(0..30)
}

do {
    assert_eq(20.of {.lnsuperprimorial} ~Z=~= 20.of{.superprimorial.ln} -> uniq, [true])
    assert_eq(20.of {.lnsuperfactorial} ~Z=~= 20.of{.superfactorial.ln} -> uniq, [true])
    assert_eq(20.of {.lnhyperfactorial} ~Z=~= 20.of{.hyperfactorial.ln} -> uniq, [true])
}

assert_eq(cyclotomic_factor(((10**258 - 1)/9 - 10**(258/2) - 1)),     %n[2, 5, 7, 11, 11, 13, 17, 73, 101, 137, 353, 449, 641, 1409, 69857, 5882353, 100000000000000000000000000000001, 909090909090909090909090909090909090909091, 10000000000000000000000000000000000000000000000000000000000000001, 1098901098901098901098901098901098901098900989010989010989010989010989010989010989011])
assert_eq(cyclotomic_factor(((10**258 - 1)/9 - 10**(258/2) - 1), 10), %n[10, 11, 11, 91, 101, 10001, 100000001, 10000000000000001, 100000000000000000000000000000001, 909090909090909090909090909090909090909091, 10000000000000000000000000000000000000000000000000000000000000001, 1098901098901098901098901098901098901098900989010989010989010989010989010989010989011])

say "** Tests passed!"
