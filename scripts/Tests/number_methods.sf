#!/usr/bin/ruby

# Tests for some Number methods.

assert_eq(inverse_usigma(120), 1..120 -> grep { .usigma == 120 })
assert_eq(inverse_usigma(5040).len, 38)
assert_eq(inverse_usigma(5040).map { .usigma }.uniq, [5040])

assert_eq(inverse_sigma(120), 1..120 -> grep { .sigma == 120 })
assert_eq(inverse_sigma(240), 1..240 -> grep { .sigma == 240 })
assert_eq(inverse_sigma(5040).len, 33)
assert_eq(inverse_sigma(5040).map{.sigma}.uniq, [5040])

assert_eq(inverse_sigma(22100, 2), [120, 130, 141])

assert_eq(inverse_phi(120), %n[143, 155, 175, 183, 225, 231, 244, 248, 286, 308, 310, 350, 366, 372, 396, 450, 462])
assert_eq(inverse_phi(5040).len, 93)
assert_eq(inverse_phi(5040).map{ .phi }.uniq, [5040])

assert_eq(inverse_psi(240), 1..240 -> grep { .psi == 240 })
assert_eq(inverse_psi(5040).len, 38)
assert_eq(inverse_psi(5040).map{.psi}.uniq, [5040])

assert_eq(inverse_uphi(120), %n[121, 143, 144, 155, 164, 183, 220, 231, 240, 242, 286, 310, 366, 462])
assert_eq(inverse_uphi(5040).len, 90)
assert_eq(inverse_uphi(5040).map{.uphi}.uniq, [5040])

assert_eq(20.of { .omega },  20.of { .factor_exp.len })
assert_eq(20.of { .Omega },  20.of { .factor.len })

assert_eq(20.of { .tau },       20.of { .divisors.len })
assert_eq(20.of { .sigma },     20.of { .divisors.sum })
assert_eq(20.of { .sigma(2) },  20.of { .divisors.sum { _*_ } })

assert_eq(20.of { .phi },    20.of {|n| 1..n -> count_by { |k| is_coprime(n,k) } })
assert_eq(20.of { .usigma }, 20.of { _ ? .factor_map { |p,e| p**e + 1 }.prod : 0 })
assert_eq(20.of { .uphi },   20.of { _ ? .factor_map { |p,e| p**e - 1 }.prod : 0 })

assert_eq(1..100 -> grep { .is_smooth(5) }, 1..100 -> grep { .gpf <= 5 })
assert_eq(2..100 -> grep { .is_rough(5)  }, 2..100 -> grep { .lpf >= 5 })

assert_eq(50.of { .inverse_phi.len }, 50.of { .inverse_phi_len })
assert_eq(50.of { .inverse_psi.len }, 50.of { .inverse_psi_len })

assert_eq(50.of { .inverse_phi.max }, 50.of { .inverse_phi_max })
assert_eq(50.of { .inverse_psi.max }, 50.of { .inverse_psi_max })

assert_eq(50.of { .inverse_phi.min }, 50.of { .inverse_phi_min })
assert_eq(50.of { .inverse_psi.min }, 50.of { .inverse_psi_min })

assert_eq(50.of { .inverse_sigma.max }, 50.of { .inverse_sigma_max })
assert_eq(50.of { .inverse_sigma.min }, 50.of { .inverse_sigma_min })

assert_eq(50.of { .inverse_sigma.len }, 50.of { .inverse_sigma_len })
assert_eq(50.of { .inverse_sigma(2).len }, 50.of { .inverse_sigma_len(2) })

assert_eq(50.of { .inverse_sigma(2).max }, 50.of { .inverse_sigma_max(2) })
assert_eq(50.of { .inverse_sigma(2).min }, 50.of { .inverse_sigma_min(2) })

assert_eq(inverse_phi(2**64).len, inverse_phi_len(2**64))
assert_eq(inverse_psi(2**64).len, inverse_psi_len(2**64))
assert_eq(inverse_sigma(2**64).len, inverse_sigma_len(2**64))

assert_eq(inverse_phi(2**64).max, inverse_phi_max(2**64))
assert_eq(inverse_phi(2**64).min, inverse_phi_min(2**64))

assert_eq(inverse_psi(2**64).max, inverse_psi_max(2**64))
assert_eq(inverse_psi(2**64).min, inverse_psi_min(2**64))

assert_eq(inverse_sigma(2**64).max, inverse_sigma_max(2**64))
assert_eq(inverse_sigma(2**64).min, inverse_sigma_min(2**64))

assert_eq(50.of { .sigma(2) }.sort.uniq.grep { _ <= 50 }, 0..50 -> grep { defined(.inverse_sigma_min(2)) })
assert_eq(50.of { .sigma(2) }.sort.uniq.grep { _ <= 50 }, 0..50 -> grep { defined(.inverse_sigma_max(2)) })

do {
    var a = Math.smooth_numbers(2,3,5,7)    # 7-smooth numbers
    var b = Math.smooth_numbers(2,5,7)      # 7-smooth numbers not divisible by 3

    assert_eq(a.first(30), 30.by { .is_smooth(7) })
    assert_eq(b.first(30), 30.by {!.is_div(3) && .is_smooth(7) })

    # Iteration is also supported
    a.each {|k|
        if (k > 1e5) {
            assert_eq(k, 100352)
            break
        }
    }
}

for a,m in (
[
    [10, 13],
    [10, 13**2],
    [10, 13**3],
    [10, 13**4],
    [44, 43*97],
    [938, 1771],
    [1313, 3808],
    [544, 800],
    [436, 1752],
    [289, 992],
    [841, 905],
    [441, 920],
    [993, 2048],
    [13**18 * 5**7 - 1, 13**18 * 5**7]
]) {
    assert_eq(Mod(sqrtmod(a, m), m)**2, a, "sqrtmod(#{a}, #{m}) = #{sqrtmod(a, m)}, which is incorrect")
}

assert_eq(squarefree_sum(1e6), 303961062910)
assert_eq(squarefree_sum(1e7), 30396557311887)

assert_eq(squarefree_count(1e9), 607927124)
assert_eq(squarefree_count(1e10), 6079270942)

for k in (0..10) {

    assert_eq(k.almost_primes(1000), 1..1000 -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(1000), 1..1000 -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(1000), k.almost_primes(1, 1000).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(1000, { take(_) }) }, k.almost_primes(1000))
    assert_eq(gather { k.omega_primes_each(1000, { take(_) }) }, k.omega_primes(1000))
    assert_eq(gather { k.squarefree_almost_primes_each(1000, { take(_) }) }, k.squarefree_almost_primes(1000))

    var from = 1000.irand
    var upto = from+1000.irand

    assert_eq(k.almost_primes(from, upto), from..upto -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), k.almost_primes(from, upto).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(from, upto, { take(_) }) }, k.almost_primes(from, upto))
    assert_eq(gather { k.omega_primes_each(from, upto, { take(_) }) }, k.omega_primes(from, upto))
    assert_eq(gather { k.squarefree_almost_primes_each(from, upto, { take(_) }) }, k.squarefree_almost_primes(from, upto))
}

if (Number.HAS_PRIME_UTIL) {
    with (2**65) {|n|

        assert_eq(1.almost_primes(n, n+100), range(n, n+100).grep{.is_prime})
        assert_eq(1.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_prime})

        assert_eq(gather { 1.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(1)})
        assert_eq(gather { 1.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).primes)

        assert_eq(2.almost_primes(n, n+100), range(n, n+100).grep{.is_semiprime})
        assert_eq(2.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_squarefree && .is_semiprime})

        assert_eq(gather { 2.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(2)})
        assert_eq(gather { 2.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_squarefree && .is_almost_prime(2)})
    }
}

for k in (1..12) {
    var n = k.pn_primorial

    #say "Testing: #{k} -> #{n}"

    var from = n-100
    var upto = n+100

    assert_eq(k.almost_primes(from, upto), from..upto -> grep{ .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), from..upto -> grep{ .is_squarefree && .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep{ .is_omega_prime(k) })
}

# RangeNumber k-almost primes

assert_eq(
    gather { 10..100 -> each_almost_prime(2, {|k| take(k) }) },
    2.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(2, {|k| take(k) }) },
    2.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_almost_prime(3, {|k| take(k) }) },
    3.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_omega_prime(3, {|k| take(k) }) },
    3.omega_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    3.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(3) }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_omega_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_omega_prime(3) }
)

assert_eq(
    gather { 10..200 `by` 3 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    10..200 `by` 3 -> grep { .is_almost_prime(3) && .is_squarefree }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(2, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(2) }
)

# RangeNumber k-powerful numbers

assert_eq(
    gather { 10..1000 -> each_powerful(2, {|k| take(k) }) },
    2.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 -> each_powerful(3, {|k| take(k) }) },
    3.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(3, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(3) }
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(2, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(2) }
)

# RangeNumber squarefree numbers

assert_eq(
    gather { 10..100 -> each_squarefree {|k| take(k) } },
    squarefree(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_squarefree {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_squarefree }
)

# RangeNumber prime numbers

assert_eq(
    gather { 10..100 -> each_prime {|k| take(k) } },
    primes(10, 100)
)

assert_eq(
    gather { 1..100 -> each_prime {|k| take(k) } },
    primes(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_prime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_prime }
)

# RangeNumber composite numbers

assert_eq(
    gather { 10..100 -> each_composite {|k| take(k) } },
    composites(10, 100)
)

assert_eq(
    gather { 1..100 -> each_composite {|k| take(k) } },
    composites(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_composite {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_composite }
)

# RangeNumber semiprime numbers

assert_eq(
    gather { 10..100 -> each_semiprime {|k| take(k) } },
    semiprimes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_semiprime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_semiprime }
)

# Counting methods

for k in (1..4) {

    var n = irand(50, 100)

    assert_eq(k.omega_prime_count(n), 1..n -> count { .is_omega_prime(k) })
    assert_eq(k.almost_prime_count(n), 1..n -> count { .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_prime_count(n), 1..n -> count { .is_squarefree && .is_almost_prime(k) })

    n = irand(100, 1000)

    assert_eq(k.omega_prime_count(n), k.omega_primes(n).len)
    assert_eq(k.almost_prime_count(n), k.almost_primes(n).len)
    assert_eq(k.squarefree_almost_prime_count(n), k.squarefree_almost_primes(n).len)
}

assert_eq(2.almost_primes(50, 100).len, 2.almost_primepi(50, 100))
assert_eq(2.almost_primes(10, 106).len, 2.almost_primepi(10, 106))
assert_eq(2.almost_primes(50, 106).len, 2.almost_primepi(50, 106))
assert_eq(3.almost_primes(50, 106).len, 3.almost_primepi(50, 106))
assert_eq(3.almost_primes(49, 105).len, 3.almost_primepi(49, 105))

assert_eq(2.omega_primes(50, 100).len, 2.omega_prime_count(50, 100))
assert_eq(2.omega_primes(10, 106).len, 2.omega_prime_count(10, 106))
assert_eq(2.omega_primes(50, 106).len, 2.omega_prime_count(50, 106))
assert_eq(3.omega_primes(50, 106).len, 3.omega_prime_count(50, 106))
assert_eq(3.omega_primes(49, 105).len, 3.omega_prime_count(49, 105))

assert_eq(2.squarefree_almost_primes(50, 100).len, 2.squarefree_almost_prime_count(50, 100))
assert_eq(2.squarefree_almost_primes(10, 106).len, 2.squarefree_almost_prime_count(10, 106))
assert_eq(2.squarefree_almost_primes(50, 106).len, 2.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(50, 106).len, 3.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(49, 105).len, 3.squarefree_almost_prime_count(49, 105))

for k in (1..4) {

    var a = irand(50, 100)
    var b = irand(a, 150)

    assert_eq(k.omega_primes(a,b), range(a,b).grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(a,b), range(a,b).grep { .is_squarefree && .is_almost_prime(k) })
}

assert_eq(2.powerful(50, 100).len, 2.powerful_count(50, 100))
assert_eq(2.powerful(10, 106).len, 2.powerful_count(10, 106))
assert_eq(2.powerful(50, 106).len, 2.powerful_count(50, 106))
assert_eq(3.powerful(50, 106).len, 3.powerful_count(50, 106))
assert_eq(3.powerful(49, 105).len, 3.powerful_count(49, 105))

for k in (1..7) {
    assert_eq(k.omega_prime_count(1e6-2e3, 1e6), k.omega_primes(1e6-2e3, 1e6).len)
    assert_eq(k.omega_prime_count(1e6-1e4, 1e6), k.omega_primes(1e6-1e4, 1e6).len)

    if (k <= 2) {
        assert_eq(k.powerful(1e6-2e3, 1e6), range(1e6-2e3, 1e6).grep{.is_powerful(k)})
        assert_eq(k.powerful(1e6-1e4, 1e6), range(1e6-1e4, 1e6).grep{.is_powerful(k)})
    }

    assert_eq(k.powerful(1e6-2e3, 1e6).len, k.powerful_count(1e6-2e3, 1e6))
    assert_eq(k.powerful(1e6-1e4, 1e6).len, k.powerful_count(1e6-1e4, 1e6))
    assert_eq(k.powerful(1e6-1e5, 1e6).len, k.powerful_count(1e6-1e5, 1e6))
}

# Almost prime divisors

assert_eq(5040.almost_prime_divisors.flat.sort, 5040.divisors)
assert_eq(5040.omega_prime_divisors.flat.sort, 5040.divisors)

with (10!) {|n|
    var divisors = n.divisors
    for k in (0 .. (1+n.bigomega)) {
        assert_eq(n.almost_prime_divisors(k), divisors.grep { .is_almost_prime(k) })
        assert_eq(n.omega_prime_divisors(k), divisors.grep { .is_omega_prime(k) })
    }
}

with (21!) {|n|
    assert_eq(almost_prime_divisors(n, 0), [1])
    assert_eq(almost_prime_divisors(n, 1), n.prime_divisors)
    assert_eq(almost_prime_divisors(n, 2), n.prime_divisors.combinations_with_repetition(2).map{.prod}.sort.grep {|d| d `divides` n })
    assert_eq(almost_prime_divisors(n, 37), n.divisors.grep { .is_almost_prime(37) })
    assert_eq(almost_prime_divisors(n, n.bigomega), [n])
    assert_eq(almost_prime_divisors(n, n.bigomega+1), [])
    assert_eq(omega_prime_divisors(n, n.omega+1), [])
}

do {

    var small_k_omega_primes = [
      %n[1],
      %n[2,3,4,5,7,8,9,11,13,16,17,19,23,25,27,29,31,32,37,41,43,47,49,53,59,61,64,67,71,73,79,81,83,89,97,101,103,107,109,113],
      %n[6,10,12,14,15,18,20,21,22,24,26,28,33,34,35,36,38,39,40,44,45,46,48,50,51,52,54,55,56,57,58,62,63,65,68,69,72,74,75,76],
      %n[30,42,60,66,70,78,84,90,102,105,110,114,120,126,130,132,138,140,150,154,156,165,168,170,174,180,182,186,190,195,198,204,220,222,228,230,231,234,238,240],
      %n[210,330,390,420,462,510,546,570,630,660,690,714,770,780,798,840,858,870,910,924,930,966,990,1020,1050,1092,1110,1122,1140,1155,1170,1190,1218,1230,1254,1260,1290,1302,1320,1326],
      %n[2310,2730,3570,3990,4290,4620,4830,5460,5610,6006,6090,6270,6510,6630,6930,7140,7410,7590,7770,7854,7980,8190,8580,8610,8778,8970,9030,9240,9282,9570,9660,9690,9870,10010,10230,10374,10626,10710,10920,11130],
    ]

    small_k_omega_primes.each_kv {|k,v|
        assert_eq(k.omega_primes(v[-1]), v)
        assert_eq(gather { k.omega_primes_each(v[0], v[-1], { take(_) }) }, v)
    }
}

do {
    func f(n, r) {
        n.factor_prod {|p|
            1 - p**r
        }
    }

    func powerfree_part_sum(n, r=2) {
        sum(1..n.iroot(r), {|k|
            f(k, r) * faulhaber(idiv(n, k**r), 1)
        })
    }

    for k in (1..10) {
        assert_eq(
            100.of { powerfree_part_sum(_, k) },
            100.of { k.powerfree_part_sum(_) }
        )

        assert_eq(
            100.of { k.powerfree_part_sum(_) },
            100.of { k.powerfree_part(_) }.acc,
        )

        assert_eq(
            100.of { k.powerfree_part(_) },
            100.of { .is_zero ? 0 : .factor_prod {|p,e| p**(e % k) } },
        )
    }
}

do {
    func powerfree_sum(n, k=2) {
        var sum = 0
        n.iroot(k).each_squarefree {|v|
            sum += (moebius(v) * v**k * faulhaber(idiv(n, v**k), 1))
        }
        return sum
    }

    for k in (2..10) {
        assert_eq(
            100.of { powerfree_sum(_, k) },
            100.of { k.powerfree_sum(_) }
        )

        assert_eq(
            100.of { k.powerfree_sum(_) },
            100.of { (.is_powerfree(k) ? 1 : 0) * _ }.acc,
        )
    }
}

do {
    func powerfree_count(n, k=2) {
        var sum = 0
        n.iroot(k).each_squarefree {|v|
            sum += (moebius(v) * idiv(n, v**k))
        }
        return sum
    }

    for k in (1..10) {
        assert_eq(
            100.of { powerfree_count(_, k) },
            100.of { k.powerfree_count(_) }
        )

        assert_eq(
            100.of { k.powerfree_count(_) },
            100.of { .is_powerfree(k) ? 1 : 0 }.acc,
        )
    }
}

assert_eq(12.omega_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])
assert_eq(12.squarefree_almost_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])

assert_eq(65.almost_primes(2**65 - 1e12, 2**65 + 1e12), %n[36893488147419103232])
assert_eq(16.omega_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])
assert_eq(16.squarefree_almost_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])

# Solve linear congruence
for a in (1..10), b in (1..10), c in (1..10) {

    var x = solve_lcg(a,b,c)

    if (!x.is_nan) {
        assert_eq(a*x % c, b % c)
        assert(is_congruent(a*x, b, c), [a,b,c])
    }
}

# Solve modular quadratic equations
assert_eq(modular_quadratic_formula(3,4,5, 124), %n[47, 55, 109, 117])
assert_eq(modular_quadratic_formula(3/5,4,5,124), %n[19, 57, 81, 119])
assert_eq(modular_quadratic_formula(3/13, 112, 13, 124), %n[9, 43, 71, 105])
assert_eq(modular_quadratic_formula(3/13, 4, 13*5, 124), %n[33, 53, 95, 115])
assert_eq(modular_quadratic_formula(3/13, 4, 5, 124), %n[3, 21, 65, 83])
assert_eq(modular_quadratic_formula(3/13, 4/7, 5, 124), %n[5, 25, 67, 87])
assert_eq(modular_quadratic_formula(3/13, 4/7, 5/11, 125), %n[3, 60])

assert_eq(modular_quadratic_formula(1,1,-1e10 + 8,1e10), %n[1810486343, 2632873031, 7367126968, 8189513656])
assert_eq(modular_quadratic_formula(4,6,10 - 1e10, 1e10), %n[905243171, 1316436515, 7367126967/2, 8189513655/2, 5905243171, 6316436515, 17367126967/2, 18189513655/2])
assert_eq(modular_quadratic_formula(1,1,-1e10 - 10, 1e10), %n[263226214, 1620648089, 8379351910, 9736773785])

say "** Tests passed!"
