#!/usr/bin/ruby

# Tests for some Number methods.

assert_eq(squarefree_sum(1e6), 303961062910)
assert_eq(squarefree_sum(1e7), 30396557311887)

assert_eq(squarefree_count(1e9), 607927124)
assert_eq(squarefree_count(1e10), 6079270942)

for k in (0..10) {

    assert_eq(k.almost_primes(1000), 1..1000 -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(1000), 1..1000 -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(1000), k.almost_primes(1, 1000).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(1000, { take(_) }) }, k.almost_primes(1000))
    assert_eq(gather { k.omega_primes_each(1000, { take(_) }) }, k.omega_primes(1000))
    assert_eq(gather { k.squarefree_almost_primes_each(1000, { take(_) }) }, k.squarefree_almost_primes(1000))

    var from = 1000.irand
    var upto = from+1000.irand

    assert_eq(k.almost_primes(from, upto), from..upto -> grep { .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), k.almost_primes(from, upto).grep{.is_squarefree})

    assert_eq(gather { k.almost_primes_each(from, upto, { take(_) }) }, k.almost_primes(from, upto))
    assert_eq(gather { k.omega_primes_each(from, upto, { take(_) }) }, k.omega_primes(from, upto))
    assert_eq(gather { k.squarefree_almost_primes_each(from, upto, { take(_) }) }, k.squarefree_almost_primes(from, upto))
}

if (Number.HAS_PRIME_UTIL) {
    with (2**65) {|n|

        assert_eq(1.almost_primes(n, n+100), range(n, n+100).grep{.is_prime})
        assert_eq(1.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_prime})

        assert_eq(gather { 1.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(1)})
        assert_eq(gather { 1.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).primes)

        assert_eq(2.almost_primes(n, n+100), range(n, n+100).grep{.is_semiprime})
        assert_eq(2.squarefree_almost_primes(n, n+100), range(n, n+100).grep{.is_squarefree && .is_semiprime})

        assert_eq(gather { 2.almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_almost_prime(2)})
        assert_eq(gather { 2.squarefree_almost_primes_each(n, n+100, { take(_) } ) }, range(n, n+100).grep{.is_squarefree && .is_almost_prime(2)})
    }
}

for k in (1..12) {
    var n = k.pn_primorial

    #say "Testing: #{k} -> #{n}"

    var from = n-100
    var upto = n+100

    assert_eq(k.almost_primes(from, upto), from..upto -> grep{ .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_primes(from, upto), from..upto -> grep{ .is_squarefree && .is_almost_prime(k) })
    assert_eq(k.omega_primes(from, upto), from..upto -> grep{ .is_omega_prime(k) })
}

# RangeNumber k-almost primes

assert_eq(
    gather { 10..100 -> each_almost_prime(2, {|k| take(k) }) },
    2.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(2, {|k| take(k) }) },
    2.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_almost_prime(3, {|k| take(k) }) },
    3.almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_omega_prime(3, {|k| take(k) }) },
    3.omega_primes(10, 100)
)

assert_eq(
    gather { 10..100 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    3.squarefree_almost_primes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(3) }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_omega_prime(3, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_omega_prime(3) }
)

assert_eq(
    gather { 10..200 `by` 3 -> each_squarefree_almost_prime(3, {|k| take(k) }) },
    10..200 `by` 3 -> grep { .is_almost_prime(3) && .is_squarefree }
)

assert_eq(
    gather { 10..100 `by` 3 -> each_almost_prime(2, {|k| take(k) }) },
    10..100 `by` 3 -> grep { .is_almost_prime(2) }
)

# RangeNumber k-powerful numbers

assert_eq(
    gather { 10..1000 -> each_powerful(2, {|k| take(k) }) },
    2.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 -> each_powerful(3, {|k| take(k) }) },
    3.powerful(10, 1000)
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(3, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(3) }
)

assert_eq(
    gather { 10..1000 `by` 3 -> each_powerful(2, {|k| take(k) }) },
    10..1000 `by` 3 -> grep { .is_powerful(2) }
)

# RangeNumber squarefree numbers

assert_eq(
    gather { 10..100 -> each_squarefree {|k| take(k) } },
    squarefree(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_squarefree {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_squarefree }
)

# RangeNumber prime numbers

assert_eq(
    gather { 10..100 -> each_prime {|k| take(k) } },
    primes(10, 100)
)

assert_eq(
    gather { 1..100 -> each_prime {|k| take(k) } },
    primes(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_prime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_prime }
)

# RangeNumber composite numbers

assert_eq(
    gather { 10..100 -> each_composite {|k| take(k) } },
    composites(10, 100)
)

assert_eq(
    gather { 1..100 -> each_composite {|k| take(k) } },
    composites(100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_composite {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_composite }
)

# RangeNumber semiprime numbers

assert_eq(
    gather { 10..100 -> each_semiprime {|k| take(k) } },
    semiprimes(10, 100)
)

assert_eq(
    gather { 10..100 `by` 3 -> each_semiprime {|k| take(k) } },
    10..100 `by` 3 -> grep { .is_semiprime }
)

# Counting methods

for k in (1..4) {

    var n = irand(50, 100)

    assert_eq(k.omega_prime_count(n), 1..n -> count { .is_omega_prime(k) })
    assert_eq(k.almost_prime_count(n), 1..n -> count { .is_almost_prime(k) })
    assert_eq(k.squarefree_almost_prime_count(n), 1..n -> count { .is_squarefree && .is_almost_prime(k) })

    n = irand(100, 1000)

    assert_eq(k.omega_prime_count(n), k.omega_primes(n).len)
    assert_eq(k.almost_prime_count(n), k.almost_primes(n).len)
    assert_eq(k.squarefree_almost_prime_count(n), k.squarefree_almost_primes(n).len)
}

assert_eq(2.almost_primes(50, 100).len, 2.almost_primepi(50, 100))
assert_eq(2.almost_primes(10, 106).len, 2.almost_primepi(10, 106))
assert_eq(2.almost_primes(50, 106).len, 2.almost_primepi(50, 106))
assert_eq(3.almost_primes(50, 106).len, 3.almost_primepi(50, 106))
assert_eq(3.almost_primes(49, 105).len, 3.almost_primepi(49, 105))

assert_eq(2.omega_primes(50, 100).len, 2.omega_prime_count(50, 100))
assert_eq(2.omega_primes(10, 106).len, 2.omega_prime_count(10, 106))
assert_eq(2.omega_primes(50, 106).len, 2.omega_prime_count(50, 106))
assert_eq(3.omega_primes(50, 106).len, 3.omega_prime_count(50, 106))
assert_eq(3.omega_primes(49, 105).len, 3.omega_prime_count(49, 105))

assert_eq(2.squarefree_almost_primes(50, 100).len, 2.squarefree_almost_prime_count(50, 100))
assert_eq(2.squarefree_almost_primes(10, 106).len, 2.squarefree_almost_prime_count(10, 106))
assert_eq(2.squarefree_almost_primes(50, 106).len, 2.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(50, 106).len, 3.squarefree_almost_prime_count(50, 106))
assert_eq(3.squarefree_almost_primes(49, 105).len, 3.squarefree_almost_prime_count(49, 105))

for k in (1..4) {

    var a = irand(50, 100)
    var b = irand(a, 150)

    assert_eq(k.omega_primes(a,b), range(a,b).grep { .is_omega_prime(k) })
    assert_eq(k.squarefree_almost_primes(a,b), range(a,b).grep { .is_squarefree && .is_almost_prime(k) })
}

assert_eq(2.powerful(50, 100).len, 2.powerful_count(50, 100))
assert_eq(2.powerful(10, 106).len, 2.powerful_count(10, 106))
assert_eq(2.powerful(50, 106).len, 2.powerful_count(50, 106))
assert_eq(3.powerful(50, 106).len, 3.powerful_count(50, 106))
assert_eq(3.powerful(49, 105).len, 3.powerful_count(49, 105))

# Almost prime divisors

assert_eq(5040.almost_prime_divisors.flat.sort, 5040.divisors)
assert_eq(5040.omega_prime_divisors.flat.sort, 5040.divisors)

do {

    var small_k_omega_primes = [
      %n[1],
      %n[2,3,4,5,7,8,9,11,13,16,17,19,23,25,27,29,31,32,37,41,43,47,49,53,59,61,64,67,71,73,79,81,83,89,97,101,103,107,109,113],
      %n[6,10,12,14,15,18,20,21,22,24,26,28,33,34,35,36,38,39,40,44,45,46,48,50,51,52,54,55,56,57,58,62,63,65,68,69,72,74,75,76],
      %n[30,42,60,66,70,78,84,90,102,105,110,114,120,126,130,132,138,140,150,154,156,165,168,170,174,180,182,186,190,195,198,204,220,222,228,230,231,234,238,240],
      %n[210,330,390,420,462,510,546,570,630,660,690,714,770,780,798,840,858,870,910,924,930,966,990,1020,1050,1092,1110,1122,1140,1155,1170,1190,1218,1230,1254,1260,1290,1302,1320,1326],
      %n[2310,2730,3570,3990,4290,4620,4830,5460,5610,6006,6090,6270,6510,6630,6930,7140,7410,7590,7770,7854,7980,8190,8580,8610,8778,8970,9030,9240,9282,9570,9660,9690,9870,10010,10230,10374,10626,10710,10920,11130],
    ]

    small_k_omega_primes.each_kv {|k,v|
        assert_eq(k.omega_primes(v[-1]), v)
        assert_eq(gather { k.omega_primes_each(v[0], v[-1], { take(_) }) }, v)
    }
}

say "** Tests passed!"
