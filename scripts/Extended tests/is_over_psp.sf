#!/usr/bin/ruby

# See also:
#   https://github.com/danaj/Math-Prime-Util-GMP/issues/19#issuecomment-689614605

var over_psp_2 = %n(
10153964664954288887958988984192371114141348228581
10179510752390528817346868019883127984016916944329
10318167390050974150417828771132751579575954317583
10460226031585915643292216526427952197847838721257
10545606059828467122604072167824849150453760751441
10947580978241534422932052441077006246846524589593
11501077245931562637775779202316801630183861087473
11573482176240453718130383929969371084296380105791
11683157607760185511317199117720352163115758941741
11707798067143543458145645003174556205830379899359
11804133256137667755513139257542495636083064228401
12065607278725080848120808345359120613714062434693
12158904886085371733325281520549145063304435001001
12283390218530826308745779191778491197560134935251
12325454240985063084988266355310708066411195805887
12357092625307597520308385684269961564056024530847
12395022250589585567183466628181276394634054765327
12748479180931388715796536597581420330813314150273
12832608039893429340940181794036068912014113259857
12963833762517714815750306372917921148304653120449
13078992851561807898283215299994669000188706584341
13209178483791881791828984109921411906027474117857
13518858459790646573832068070750404710812004383313
14279464802368536551818035015851673573682735361587
14668622839741838238059474129099067693146489890001
14951782759651379016245322157661521433850919359193
15337043217913024668243401317458213565925297063641
15408837905638824858452583924905346135917965585153
16022624585574607230123183942058243426914742941529
16423398528748276341467904112120072743434323651801
)

var over_psp_2_3 = %n(
999999999900002476031598466237906381
9999999999999900860981998748325000856057
99000000000000005481527143246898419572661
99999999999999906020461632527741283417937
999999999999999908950734330937085375723953
1489567834550368298591868572395759522475461
2076402641723624677480500526367560651213021
2548702774050140166317956803490746598800901
9999999000000000065169507275535349664709661
990000000000000000123039865883084984765283061
99000000000000000000006075447082115391445338253
999999999999999999908240116343881692966305827177
900000000000000000000000114857152964936674489086410937961
10000000000000000000000000271894451067172358890039455525513
999999999999999999999999990431170838193693027672821285085817
2337407251669087931036068647880770604289108676117556607243653
)

var over_psp_2_5 = %n(
883878351738685414408042512092294561
999999999900002476031598466237906381
10000000000000000067555727124756092023331889
9999999999999999999299485428016696449569878561
1379108730982173455526327750883963461051887200468795028930821
2839901040636446307963276974791716231888010089098621164306621
10000000000000000000000000002154297471916658745391092062215201
100000000000000000000000000012655503215534797236515613062342013129
)

say ":: Checking small terms..."

var t0 = Time.micro

var small_over_psp_2 = %n[2047, 3277, 4033, 8321, 65281, 80581, 85489, 88357, 104653, 130561, 220729, 253241, 256999, 280601, 390937, 458989, 486737, 514447, 580337, 818201, 838861, 877099, 916327, 976873, 1016801, 1082401, 1145257, 1194649, 1207361, 1251949, 1252697, 1325843]

assert(small_over_psp_2.all{.is_over_psp(2)})
assert(small_over_psp_2.none{.is_over_psp(3)})
assert(small_over_psp_2.none{.is_over_psp(5)})

var small_over_psp_5 = %n[781, 1541, 5461, 13021, 15751, 25351, 29539, 38081, 40501, 79381, 100651, 121463, 133141, 195313, 216457, 315121, 318551, 319507, 326929, 341531, 353827, 375601, 416641, 432821, 453331, 464881, 498451, 555397, 556421, 753667, 764941, 863329, 872101, 886411]

assert(small_over_psp_5.all{.is_over_psp(5)})
assert(small_over_psp_5.none{.is_over_psp})

assert_eq(10.by { .is_over_psp }, %n[3, 5, 7, 11, 13, 17, 19, 23, 29, 31])
assert_eq(10.by { .is_over_psp(2,3) }, %n[5, 7, 11, 13, 17, 19, 23, 29, 31, 37])
assert_eq(10.by { .is_composite && .is_over_psp }, %n[2047, 3277, 4033, 8321, 65281, 80581, 85489, 88357, 104653, 130561])
assert_eq(10.by { .is_composite && .is_over_psp(3) }, %n[121, 703, 3281, 8401, 12403, 31621, 44287, 47197, 55969, 74593])

var smal_over_psp_2_3 = %n[5173601, 13694761, 16070429, 27509653, 54029741, 66096253, 102690677, 117987841, 193949641, 206304961, 314184487, 390612221, 393611653, 717653129, 960946321, 1157839381, 1236313501, 1481626513, 1860373241, 1921309633, 2217879901, 2412172153, 2626783921]

assert(smal_over_psp_2_3.all{.is_over_psp(2)})
assert(smal_over_psp_2_3.all{.is_over_psp(3)})
assert(smal_over_psp_2_3.all{.is_over_psp(2,3)})

assert_eq(smal_over_psp_2_3.grep{.is_over_psp(5)}, [960946321])

var small_strong_psp_2_3_5 = %n[25326001, 161304001, 960946321, 1157839381, 3215031751, 3697278427, 5764643587, 6770862367, 14386156093, 15579919981, 18459366157, 19887974881, 21276028621, 27716349961, 29118033181, 37131467521, 41752650241, 42550716781, 43536545821]

assert_eq(small_strong_psp_2_3_5.grep { .is_over_psp(2) }, %n[161304001, 960946321, 1157839381, 6770862367, 18459366157, 21276028621, 29118033181, 37131467521, 42550716781, 43536545821])
assert_eq(small_strong_psp_2_3_5.grep { .is_over_psp(3) }, %n[960946321, 1157839381, 6770862367, 15579919981, 18459366157, 29118033181, 37131467521])
assert_eq(small_strong_psp_2_3_5.grep { .is_over_psp(5) }, %n[25326001, 960946321, 3697278427, 18459366157, 21276028621, 42550716781, 43536545821])
assert_eq(small_strong_psp_2_3_5.grep { .is_over_psp(2,3) }, %n[960946321, 1157839381, 6770862367, 18459366157, 29118033181, 37131467521])

say ("Took: ", Time.micro-t0)

say ":: Checking large terms..."

t0 = Time.micro

assert(over_psp_2.all   { .is_over_psp })
assert(over_psp_2_3.all { .is_over_psp(2,3) })
assert(over_psp_2_5.all { .is_over_psp(2,5) })

say ("Took: ", Time.micro-t0)

# 4.55425
# 3.3603
# 3.72512
# 4.96837
# 2.87557 (2022)

__END__
:: Checking small terms...
Took: 1.10135
:: Checking large terms...
Took: 4.34719
