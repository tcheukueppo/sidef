#!/usr/bin/ruby

# Tests for some Number methods.

for k in (1..7) {
    assert_eq(k.omega_prime_count(1e6-2e3, 1e6), k.omega_primes(1e6-2e3, 1e6).len)
    assert_eq(k.omega_prime_count(1e6-1e4, 1e6), k.omega_primes(1e6-1e4, 1e6).len)

    if (k <= 2) {
        assert_eq(k.powerful(1e6-2e3, 1e6), range(1e6-2e3, 1e6).grep{.is_powerful(k)})
        assert_eq(k.powerful(1e6-1e4, 1e6), range(1e6-1e4, 1e6).grep{.is_powerful(k)})
    }

    assert_eq(k.powerful(1e6-2e3, 1e6).len, k.powerful_count(1e6-2e3, 1e6))
    assert_eq(k.powerful(1e6-1e4, 1e6).len, k.powerful_count(1e6-1e4, 1e6))
    assert_eq(k.powerful(1e6-1e5, 1e6).len, k.powerful_count(1e6-1e5, 1e6))
}

with (10!) {|n|
    var divisors = n.divisors
    for k in (0 .. (1+n.bigomega)) {
        assert_eq(n.almost_prime_divisors(k), divisors.grep { .is_almost_prime(k) })
        assert_eq(n.omega_prime_divisors(k), divisors.grep { .is_omega_prime(k) })
    }
}

with (21!) {|n|
    assert_eq(almost_prime_divisors(n, 0), [1])
    assert_eq(almost_prime_divisors(n, 1), n.prime_divisors)
    assert_eq(almost_prime_divisors(n, 2), n.prime_divisors.combinations_with_repetition(2).map{.prod}.sort.grep {|d| d `divides` n })
    assert_eq(almost_prime_divisors(n, 37), n.divisors.grep { .is_almost_prime(37) })
    assert_eq(almost_prime_divisors(n, n.bigomega), [n])
    assert_eq(almost_prime_divisors(n, n.bigomega+1), [])
    assert_eq(omega_prime_divisors(n, n.omega+1), [])
}

assert_eq(12.omega_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])
assert_eq(12.squarefree_almost_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])

assert_eq(65.almost_primes(2**65 - 1e12, 2**65 + 1e12), %n[36893488147419103232])
assert_eq(16.omega_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])
assert_eq(16.squarefree_almost_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])

assert(!is_almost_prime(503**72 * (2**64 + 1), 77))
assert(!is_almost_prime(503**76 * (2**64 + 1), 77))
assert(!is_almost_prime(503**77 * (2**64 + 1), 77))
assert(!is_almost_prime(503**78 * (2**64 + 1), 77))
assert(is_almost_prime(503**75 * (2**64 + 1), 77))

assert(!is_almost_prime(503**74 * (2**128 + 1), 77))
assert(!is_almost_prime(503**76 * (2**128 + 1), 77))
assert(!is_almost_prime(503**77 * (2**128 + 1), 77))
assert(!is_almost_prime(503**78 * (2**128 + 1), 77))
assert(is_almost_prime(503**75 * (2**128 + 1), 77))

assert(!is_almost_prime(3449**74 * 1e100.random_prime, 76))
assert(!is_almost_prime(3449**76 * 1e100.random_prime, 76))
assert(is_almost_prime(3449**75 * 1e100.random_prime, 76))

func A358860(n) {
    for k in (1..Inf) {
        var t = pyramidal(k, n)
        if (t.divisors.count {|d| d.is_pyramidal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358860.map(3..9), %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800])
assert_eq(A358860(11), 78540000)
assert_eq(A358860(14), 22241349900)

assert(
    %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800, 41086892000, 78540000, 38102655397426620, 59089382788800, 22241349900, 2326493030400, 7052419469195100, 886638404171520].map_kv {|k,v|
        v.divisors.count {|d| d.is_pyramidal(k+3) } == (k+3)
    }.all
)

assert(
    %n[6, 36, 210, 4560, 6426, 326040, 4232250, 1969110, 296676380, 4798080, 166289760, 73765692000, 712750500, 50561280, 33944067893736, 2139168754800, 4292572951800, 1414764341760, 72461756727360, 180975331456920, 1870768457500800, 5498331930000, 153698278734000].map_kv{ |k,v|
        v.divisors.count {|d| d.is_polygonal(k+3) } == (k+3)
    }.all
)

func A358861(n) {
    for k in (1..Inf) {
        var t = centered_polygonal(k, n)
        if (t.divisors.count {|d| d.is_centered_polygonal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358861.map(3..9), %n[64, 925, 2976, 93457, 866272, 11025, 3036880])

assert(
    %n[64, 925, 2976, 93457, 866272, 11025, 3036880, 18412718645101, 9283470627432, 201580440699781, 92839099743040, 5236660451226975, 66779973961058176].map_kv {|k,v|
        v.divisors.count {|d| d.is_centered_polygonal(k+3) } == (k+3)
    }.all,
)

assert(
    %n[316, 1625, 456, 3964051, 21568, 6561, 346528, 3588955448828761, 1684992, 210804461608463437, 36865024, 835904150390625, 2052407296].map_kv {|k,v|
        v.is_centered_polygonal(k+3)
    }.all,
)

assert(
    %n[460, 99905, 463326, 808208947, 23089262218, 12442607161209225, 53780356630, 700326051644920151, 46634399568693102, 45573558879962759570353].map_kv{|k,v|
        v.is_centered_polygonal(k+3)
    }.all
)

assert(
    %n[20, 140, 405, 2856, 25296, 111720, 25984, 5474000, 237600, 223826688, 3852800, 268565760, 1834725376, 175861400000, 335674368, 2863363937280, 4383831556096, 206015846400, 3400704000, 938209120583680, 2981338216980480, 21463949229465600, 45410367307776, 72056803765911552, 4803826408397209600, 1536502117117468999680, 10823784744326529024].map_kv{|k,v|
        v.is_pyramidal(k+3)
    }.all
)

assert(
    %n[84, 1785, 299880, 1020510, 8897460, 102612510, 33367223274, 249417828660, 9177835927260, 10064864238489060, 5558913993302670, 15633689593760207970, 3792821921183752657200].map_kv{|k,v|
        v.is_pyramidal(k+3)
    }.all
)

assert(
    %n[66, 44100, 11310, 103740, 3333330, 185040240, 15529888374, 626141842326, 21647593547580, 351877410344460, 82634328555218440, 2383985537862979050, 239213805711830629680].map_kv{|k,v|
        v.is_polygonal(k+3)
    }.all
)

assert(
    %n[28, 16, 176, 4950, 8910, 1408, 346500, 277992, 7542080, 326656, 544320, 120400000, 145213440, 48549888, 4733575168, 536813568, 2149576704, 3057500160, 938539560960, 1358951178240, 36324805836800, 99956555776, 49212503949312, 118747221196800, 59461613912064, 13749193801728, 7526849672380416, 98516240758210560, 4969489493917696, 78673429816934400, 4467570822566903808, 1013309912383488000].map_kv{|k,v|
        v.is_polygonal(k+3)
    }.all
)

assert(256.is_centered_polygonal(8) -> not)
assert_eq(4422094135361.divisors.count { .is_centered_polygonal(16) }, 9)
assert_eq(1415913990579036.divisors.count { .is_centered_polygonal(17) }, 17)

for k in (8, 9, 10, 16) {
    assert_eq(
        30.of{.centered_polygonal(k)},
        30.by{.is_centered_polygonal(k)},
    )
}

assert_eq(22481472512595506664194504339096889.special_factor(3), %n[3, 3, 2890274768627, 864257411579942987723])

assert_eq(
    %n[1, 2, 4, 7, 24, 77, 27, 87, 220, 104, 1007, 175, 1000, 1287, 6187, 10867, 5967, 13727, 5719, 22847, 18980, 21735, 55912, 245024, 195975, 288144, 196735, 108927, 1107567, 5404112, 3145824, 3768687, 5405575, 1245887, 521559, 1101600].map {.pyramidal(4).divisors.count{.is_pyramidal(4)}},
    @(1..36)
)

assert_eq(2781999.pyramidal(4).divisors.count{.is_pyramidal(4)}, 40)

# OEIS: A359492
assert([
    56, 48, 96, 192, 384, 2816, 1536, 109568, 10582016, 12288, 7429922816, 64176128, 4318724096, 196608, 60486975488, 9388028592128,
    214058289594368, 849566088298496, 896029329195008, 10228945815339008, 54409680373415936, 188039754665689088, 246561971023904768, 966464636658384896, 1278798840983453696,
].all {|k|
    sum_of_squares(k + 2).any { .all_prime }
})

assert_eq(
    35.by{.lucas.sum_of_squares.is_empty},
    %n[2, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45]
)

assert_eq(
    25.by{.fib.sum_of_squares.is_empty},
    %n[4, 8, 10, 16, 18, 20, 22, 24, 28, 30, 32, 34, 36, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 64],
)

assert_eq(sqrtmod_all(1, 9240), modular_quadratic_formula(1, 0, -1, 9240))

say ":: Test passed!"
