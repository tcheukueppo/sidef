#!/usr/bin/ruby

# Tests for some Number methods.

for k in (1..7) {
    assert_eq(k.omega_prime_count(1e6-2e3, 1e6), k.omega_primes(1e6-2e3, 1e6).len)
    assert_eq(k.omega_prime_count(1e6-1e4, 1e6), k.omega_primes(1e6-1e4, 1e6).len)

    if (k <= 2) {
        assert_eq(k.powerful(1e6-2e3, 1e6), range(1e6-2e3, 1e6).grep{.is_powerful(k)})
        assert_eq(k.powerful(1e6-1e4, 1e6), range(1e6-1e4, 1e6).grep{.is_powerful(k)})
    }

    assert_eq(k.powerful(1e6-2e3, 1e6).len, k.powerful_count(1e6-2e3, 1e6))
    assert_eq(k.powerful(1e6-1e4, 1e6).len, k.powerful_count(1e6-1e4, 1e6))
    assert_eq(k.powerful(1e6-1e5, 1e6).len, k.powerful_count(1e6-1e5, 1e6))
}

with (10!) {|n|
    var divisors = n.divisors
    for k in (0 .. (1+n.bigomega)) {
        assert_eq(n.almost_prime_divisors(k), divisors.grep { .is_almost_prime(k) })
        assert_eq(n.omega_prime_divisors(k), divisors.grep { .is_omega_prime(k) })
    }
}

with (21!) {|n|
    assert_eq(almost_prime_divisors(n, 0), [1])
    assert_eq(almost_prime_divisors(n, 1), n.prime_divisors)
    assert_eq(almost_prime_divisors(n, 2), n.prime_divisors.combinations_with_repetition(2).map{.prod}.sort.grep {|d| d `divides` n })
    assert_eq(almost_prime_divisors(n, 37), n.divisors.grep { .is_almost_prime(37) })
    assert_eq(almost_prime_divisors(n, n.bigomega), [n])
    assert_eq(almost_prime_divisors(n, n.bigomega+1), [])
    assert_eq(omega_prime_divisors(n, n.omega+1), [])
}

assert_eq(12.omega_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])
assert_eq(12.squarefree_almost_primes(1e13), %n[7420738134810, 8222980095330, 8624101075590, 9426343036110, 9814524629910])

assert_eq(65.almost_primes(2**65 - 1e12, 2**65 + 1e12), %n[36893488147419103232])
assert_eq(16.omega_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])
assert_eq(16.squarefree_almost_primes(16.pn_primorial - 100, 16.pn_primorial + 100), %n[32589158477190044730])

assert(!is_almost_prime(503**72 * (2**64 + 1), 77))
assert(!is_almost_prime(503**76 * (2**64 + 1), 77))
assert(!is_almost_prime(503**77 * (2**64 + 1), 77))
assert(!is_almost_prime(503**78 * (2**64 + 1), 77))
assert(is_almost_prime(503**75 * (2**64 + 1), 77))

assert(!is_almost_prime(503**74 * (2**128 + 1), 77))
assert(!is_almost_prime(503**76 * (2**128 + 1), 77))
assert(!is_almost_prime(503**77 * (2**128 + 1), 77))
assert(!is_almost_prime(503**78 * (2**128 + 1), 77))
assert(is_almost_prime(503**75 * (2**128 + 1), 77))

assert(!is_almost_prime(3449**74 * 1e100.random_prime, 76))
assert(!is_almost_prime(3449**76 * 1e100.random_prime, 76))
assert(is_almost_prime(3449**75 * 1e100.random_prime, 76))

func A358860(n) {
    for k in (1..Inf) {
        var t = pyramidal(k, n)
        if (t.divisors.count {|d| d.is_pyramidal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358860.map(3..9), %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800])
assert_eq(A358860(11), 78540000)
assert_eq(A358860(14), 22241349900)

assert_eq(
    %n[56, 140, 4200, 331800, 611520, 8385930, 1071856800, 41086892000, 78540000, 38102655397426620, 59089382788800, 22241349900, 2326493030400, 7052419469195100, 886638404171520].map_kv {|k,v|
        v.divisors.count {|d| d.is_pyramidal(k+3) } == (k+3)
    },
    15.of(true)
)

assert_eq(
    %n[6, 36, 210, 4560, 6426, 326040, 4232250, 1969110, 296676380, 4798080, 166289760, 73765692000, 712750500, 50561280, 33944067893736, 2139168754800, 4292572951800, 1414764341760, 72461756727360, 180975331456920, 1870768457500800, 5498331930000, 153698278734000].map_kv{ |k,v|
        v.divisors.count {|d| d.is_polygonal(k+3) } == (k+3)
    },
    23.of(true),
)

func A358861(n) {
    for k in (1..Inf) {
        var t = centered_polygonal(k, n)
        if (t.divisors.count {|d| d.is_centered_polygonal(n) } == n) {
            return t
        }
    }
}

assert_eq(A358861.map(3..9), %n[64, 925, 2976, 93457, 866272, 11025, 3036880])

assert_eq(
    %n[64, 925, 2976, 93457, 866272, 11025, 3036880, 18412718645101, 9283470627432, 201580440699781, 92839099743040, 5236660451226975, 66779973961058176].map_kv {|k,v|
        v.divisors.count {|d| d.is_centered_polygonal(k+3) } == (k+3)
    },
    13.of(true)
)

assert(256.is_centered_polygonal(8) -> not)
assert_eq(4422094135361.divisors.count { .is_centered_polygonal(16) }, 9)
assert_eq(1415913990579036.divisors.count { .is_centered_polygonal(17) }, 17)

for k in (8, 9, 10, 16) {
    assert_eq(
        30.of{.centered_polygonal(k)},
        30.by{.is_centered_polygonal(k)},
    )
}

assert_eq(22481472512595506664194504339096889.special_factor(3), %n[3, 3, 2890274768627, 864257411579942987723])

say ":: Test passed!"
