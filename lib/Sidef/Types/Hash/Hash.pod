
=encoding utf8

=head1 NAME

Sidef::Types::Hash::Hash

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Hash(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 &

    a & b

Returns the

Aliases: I<and>, I<intersection>

=cut

=head2 +

    a + b

Returns the

Aliases: I<merge>, I<concat>

=cut

=head2 -

    a - b

Returns the

Aliases: I<sub>, I<diff>, I<difference>

=cut

=head2 ...

    a ... b

Returns the

Aliases: I<to_list>

=cut

=head2 ==

    a == b

Returns the

Aliases: I<eq>

=cut

=head2 ^

    a ^ b

Returns the

Aliases: I<xor>, I<symdiff>, I<symmetric_difference>

=cut

=head2 |

    a | b

Returns the

Aliases: I<or>, I<union>

=cut

=head2 ≠

    a ≠ b

Returns the

Aliases: I<!=>, I<ne>

=cut

=head2 append

    self.append(:pairs)

Returns the

=cut

=head2 as_tree

    self.as_tree(root)

Returns the

=cut

=head2 clear

    self.clear

Returns the

=cut

=head2 collect

    self.collect(block)

Returns the

Aliases: I<collect_kv>

=cut

=head2 count

    self.count(obj)

Returns the

=cut

=head2 count_by

    self.count_by(block)

Returns the

=cut

=head2 delete

    self.delete(*keys)

Returns the

Aliases: I<remove>

=cut

=head2 delete_if

    self.delete_if(block)

Returns the

=cut

=head2 dig

    self.dig(key, *keys)

Returns the

=cut

=head2 each

    self.each(obj)

Returns the

Aliases: I<each_kv>, I<each_pair>

=cut

=head2 each_k

    self.each_k(block)

Returns the

Aliases: I<each_key>

=cut

=head2 each_v

    self.each_v(block)

Returns the

Aliases: I<each_value>

=cut

=head2 fetch

    self.fetch(key, default)

Returns the

=cut

=head2 flip

    self.flip

Returns the

Aliases: I<invert>, I<reverse>

=cut

=head2 get_pair

    self.get_pair(key)

Returns the

=cut

=head2 get_pairs

    self.get_pairs(*keys)

Returns the

=cut

=head2 grep

    self.grep(block)

Returns the

Aliases: I<grep_kv>, I<select>

=cut

=head2 grep_v

    self.grep_v(block)

Returns the

Aliases: I<grep_val>

=cut

=head2 has

    self.has(key)

Returns the

Aliases: I<exists>, I<has_key>, I<haskey>, I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 is_empty

    self.is_empty

Returns the

=cut

=head2 item

    self.item(key)

Returns the

=cut

=head2 items

    self.items(*keys)

Returns the

=cut

=head2 keys

    self.keys

Returns the

=cut

=head2 kv

    self.kv

Returns the

Aliases: I<to_a>, I<pairs>, I<to_array>

=cut

=head2 len

    self.len

Returns the

Aliases: I<size>, I<length>

=cut

=head2 lsel

    self.lsel(keys)

Returns the

Aliases: I<linsel>, I<linear_selection>

=cut

=head2 map

    self.map(block)

Returns the

Aliases: I<map_kv>

=cut

=head2 map_v

    self.map_v(block)

Returns the

Aliases: I<map_val>

=cut

=head2 max_by

    self.max_by(block)

Returns the

=cut

=head2 merge_values

    self.merge_values(obj)

Returns the

=cut

=head2 min_by

    self.min_by(block)

Returns the

=cut

=head2 new

    self.new

Returns the

Aliases: I<call>

=cut

=head2 same_keys

    self.same_keys(obj)

Returns the

=cut

=head2 set_keys

    self.set_keys(*keys)

Returns the

=cut

=head2 slice

    self.slice(*keys)

Returns the

=cut

=head2 sort

    self.sort(block)

Returns the

=cut

=head2 sort_by

    self.sort_by(block)

Returns the

=cut

=head2 to_bag

    self.to_bag

Returns the

=cut

=head2 to_s

    self.to_s

Returns the

Aliases: I<dump>, I<to_str>

=cut

=head2 to_set

    self.to_set

Returns the

=cut

=head2 values

    self.values

Returns the

=cut
