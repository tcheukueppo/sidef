
=encoding utf8

=head1 NAME

Sidef::Types::Number::Polynomial

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

    var a = Polynomial(5)                   # monomial: x^5
    var b = Polynomial([1,2,3,4])           # x^3 + 2*x^2 + 3*x + 4
    var c = Polynomial(5 => 3, 2 => 10)     # 3*x^5 + 10*x^2

=head1 INHERITS

Inherits methods from:

       * Sidef::Types::Number::Number

=head1 METHODS

=head2 !=

    a != b

Returns the

Aliases: I<ne>

=cut

=head2 %

    a % b

Returns the

Aliases: I<mod>

=cut

=head2 *

    a * b

Returns the

Aliases: I<mul>

=cut

=head2 **

    a ** b

Returns the

Aliases: I<pow>

=cut

=head2 +

    a + b

Returns the

Aliases: I<add>

=cut

=head2 ++

    a ++ b

Returns the

Aliases: I<inc>

=cut

=head2 -

    a - b

Returns the

Aliases: I<sub>

=cut

=head2 --

    a -- b

Returns the

Aliases: I<dec>

=cut

=head2 /

    a / b

Returns the

Aliases: I<÷>, I<div>

=cut

=head2 //

    a // b

Returns the

Aliases: I<idiv>, I<idiv_ceil>, I<idiv_floor>, I<idiv_round>, I<idiv_trunc>

=cut

=head2 <

    a < b

Returns the

Aliases: I<lt>

=cut

=head2 <=>

    a <=> b

Returns the

Aliases: I<cmp>

=cut

=head2 ==

    a == b

Returns the

Aliases: I<eq>

=cut

=head2 >

    a > b

Returns the

Aliases: I<gt>

=cut

=head2 ≤

    a ≤ b

Returns the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

    a ≥ b

Returns the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 binomial

    Polynomial.binomial()

Returns the

=cut

=head2 ceil

    Polynomial.ceil()

Returns the

=cut

=head2 coeff

    Polynomial.coeff()

Returns the

=cut

=head2 coeffs

    Polynomial.coeffs()

Returns the

=cut

=head2 degree

    Polynomial.degree()

Returns the

=cut

=head2 divmod

    Polynomial.divmod()

Returns the

=cut

=head2 dump

    Polynomial.dump()

Returns the

=cut

=head2 eval

    Polynomial.eval()

Returns the

=cut

=head2 float

    Polynomial.float()

Returns the

=cut

=head2 floor

    Polynomial.floor()

Returns the

=cut

=head2 inv

    Polynomial.inv()

Returns the

=cut

=head2 invmod

    Polynomial.invmod()

Returns the

=cut

=head2 is_inf

    Polynomial.is_inf()

Returns the

=cut

=head2 is_mone

    Polynomial.is_mone()

Returns the

=cut

=head2 is_nan

    Polynomial.is_nan()

Returns the

=cut

=head2 is_ninf

    Polynomial.is_ninf()

Returns the

=cut

=head2 is_one

    Polynomial.is_one()

Returns the

=cut

=head2 is_real

    Polynomial.is_real()

Returns the

=cut

=head2 is_zero

    Polynomial.is_zero()

Returns the

=cut

=head2 keys

    Polynomial.keys()

Returns the

Aliases: I<exponents>

=cut

=head2 neg

    Polynomial.neg()

Returns the

=cut

=head2 new

    Polynomial.new()

Returns the

Aliases: I<call>

=cut

=head2 norm

    Polynomial.norm()

Returns the

=cut

=head2 powmod

    Polynomial.powmod()

Returns the

=cut

=head2 re

    Polynomial.re()

Returns the

Aliases: I<real>

=cut

=head2 round

    Polynomial.round()

Returns the

=cut

=head2 sqr

    Polynomial.sqr()

Returns the

=cut

=head2 to_n

    Polynomial.to_n()

Returns the

=cut

=head2 to_poly

    Polynomial.to_poly()

Returns the

=cut

=head2 to_s

    Polynomial.to_s()

Returns the

Aliases: I<stringify>

=cut
