
=encoding utf8

=head1 NAME

Sidef::Types::Number::Mod

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

    var a = Mod(13, 19)

    a += 15         # Mod(9, 19)
    a *= 99         # Mod(17, 19)
    a /= 17         # Mod(1, 19)

    say a           # Mod(1, 19)

=head1 INHERITS

Inherits methods from:

       * Sidef::Types::Number::Number

=head1 METHODS

=head2 !

    a ! b

Returns the

Aliases: I<factorial>

=cut

=head2 !=

    a != b

Returns the

Aliases: I<ne>

=cut

=head2 &

    a & b

Returns the

Aliases: I<and>

=cut

=head2 *

    a * b

Returns the

Aliases: I<mul>

=cut

=head2 **

    a ** b

Returns the

Aliases: I<pow>

=cut

=head2 +

    a + b

Returns the

Aliases: I<add>

=cut

=head2 ++

    a ++ b

Returns the

Aliases: I<inc>

=cut

=head2 -

    a - b

Returns the

Aliases: I<sub>

=cut

=head2 --

    a -- b

Returns the

Aliases: I<dec>

=cut

=head2 /

    a / b

Returns the

Aliases: I<÷>, I<div>

=cut

=head2 <

    a < b

Returns the

Aliases: I<lt>

=cut

=head2 <<

    a << b

Returns the

Aliases: I<lsft>, I<shift_left>

=cut

=head2 <=>

    a <=> b

Returns the

Aliases: I<cmp>

=cut

=head2 ==

    a == b

Returns the

Aliases: I<eq>

=cut

=head2 >

    a > b

Returns the

Aliases: I<gt>

=cut

=head2 >>

    a >> b

Returns the

Aliases: I<rsft>, I<shift_right>

=cut

=head2 ^

    a ^ b

Returns the

Aliases: I<xor>

=cut

=head2 |

    a | b

Returns the

Aliases: I<or>

=cut

=head2 ≤

    a ≤ b

Returns the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

    a ≥ b

Returns the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 abs

    x.abs

Returns the

=cut

=head2 chebyshevt

    x.chebyshevt(n)

Returns the

Aliases: I<chebyshevT>

=cut

=head2 chebyshevu

    x.chebyshevu(n)

Returns the

Aliases: I<chebyshevU>

=cut

=head2 chinese

    *values.chinese

Returns the

=cut

=head2 cyclotomic

    x.cyclotomic(n)

Returns the

=cut

=head2 dump

    x.dump

Returns the

=cut

=head2 eval

    x.eval(v)

Returns the

=cut

=head2 fib

    x.fib

Returns the

Aliases: I<fibonacci>

=cut

=head2 inv

    x.inv

Returns the

=cut

=head2 is_inf

    self.is_inf

Returns the

=cut

=head2 is_mone

    x.is_mone

Returns the

=cut

=head2 is_nan

    self.is_nan

Returns the

=cut

=head2 is_neg

    self.is_neg

Returns the

=cut

=head2 is_ninf

    self.is_ninf

Returns the

=cut

=head2 is_one

    x.is_one

Returns the

=cut

=head2 is_pos

    self.is_pos

Returns the

=cut

=head2 is_real

    self.is_real

Returns the

=cut

=head2 is_zero

    x.is_zero

Returns the

=cut

=head2 lucas

    x.lucas

Returns the

=cut

=head2 lucasu

    x.lucasu(P, Q)

Returns the

Aliases: I<lucasU>

=cut

=head2 lucasv

    x.lucasv(P, Q)

Returns the

Aliases: I<lucasV>

=cut

=head2 modulus

    self.modulus

Returns the

=cut

=head2 neg

    x.neg

Returns the

=cut

=head2 new

    self.new

Returns the

Aliases: I<call>

=cut

=head2 norm

    self.norm

Returns the

=cut

=head2 pretty

    x.pretty

Returns the

=cut

=head2 re

    self.re

Returns the

Aliases: I<real>

=cut

=head2 sqr

    x.sqr

Returns the

=cut

=head2 sqrt

    x.sqrt

Returns the

=cut

=head2 to_n

    self.to_n

Returns the

Aliases: I<lift>

=cut

=head2 to_s

    x.to_s

Returns the

=cut

=head2 znorder

    x.znorder

Returns the

Aliases: I<multiplicative_order>

=cut
