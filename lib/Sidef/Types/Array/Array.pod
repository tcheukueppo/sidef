
=encoding utf8

=head1 NAME

Sidef::Types::Array::Array

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = Array(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 &

    a & b

Returns the intersection of two arrays.

    <a a a b c> & <a x y a c>    #=> ["a", "a", "c"]

Aliases: I<and>

=cut

=head2 *

    a * n

Repeats the content of array C<a> n times, returning a new array.

    <a b> * 2   #=> ["a", "b", "a", "b"]

Aliases: I<mul>

=cut

=head2 **

    a ** n

Matrix exponentiation, excpecting array C<a> to be a 2D array.

Aliases: I<mpow>, I<matrix_pow>

=cut

=head2 +

    a + b

Array concatenation, returning a new array.

    <a b> + <c d>    #=> ["a", "b", "c", "d"]

Aliases: I<add>, I<concat>

=cut

=head2 -

    a - b

Array difference: removes any element from array C<a> that exists inside array C<b>, returning a new array.

    <a a a b c> - <a x y a c>       #=> ["a", "b"]

Aliases: I<sub>, I<diff>

=cut

=head2 ...

    a...

Converts array C<a> into a list.

    var (a,b,c) = <1 2 3>...

Aliases: I<to_list>

=cut

=head2 /

    a / n

Divides the array C<a> into C<n> segments.

If the division is not exact, the remaining incomplete segment is added to the end of the returned array.

    <a b c d>   / 2     #=> [["a", "b"], ["c", "d"]]
    <a b c d e> / 2     #=> [["a", "b"], ["c", "d"], ["e"]]

Aliases: I<÷>, I<div>

=cut

=head2 <

    a < b

Less-than array comparison, done term-by-term, returning C<true> or C<false>.

Aliases: I<lt>

=cut

=head2 <=>

    a <=> b

Array comparison, done term-by-term, returning:

     1 when a > b
     0 when a == b
    -1 when a < b

Aliases: I<cmp>

=cut

=head2 ==

    a == b

Returns true if C<a> and C<b> are equal to each other.

Aliases: I<eq>

=cut

=head2 >

    a > b

Greater-than array comparison, done term-by-term, returning C<true> or C<false>.

Aliases: I<gt>

=cut

=head2 ^

    a ^ b

Returns the set difference of two arrays.

    <a a a b c> ^ <a x y a c>   #=> ["a", "b", "x", "y"]

Aliases: I<xor>

=cut

=head2 |

    a | b

Returns the union of two arrays.

    <a a a b c> | <a x y a c>   #=> ["a", "a", "a", "b", "c", "x", "y"]

Aliases: I<or>

=cut

=head2 |>>

    a |>> b

Returns the

Aliases: I<pipeline_map_op>

=cut

=head2 |X>

    Array.|X>()

Returns the

Aliases: I<pipeline_cross_op>

=cut

=head2 |Z>

    Array.|Z>()

Returns the

Aliases: I<pipeline_zip_op>

=cut

=head2 «

    a « b

Returns the

Aliases: I<E<lt>E<lt>>, I<push>, I<append>

=cut

=head2 »

    a » b

Returns the

Aliases: I<E<gt>E<gt>>, I<pop>, I<drop_last>, I<drop_right>

=cut

=head2 ∋

    a ∋ b

Returns the

Aliases: I<has>, I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 ∌

    a ∌ b

Returns the

=cut

=head2 ≠

    a ≠ b

Returns the

Aliases: I<!=>, I<ne>

=cut

=head2 ≤

    a ≤ b

Returns the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

    a ≥ b

Returns the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 abbrev

    Array.abbrev()

Returns the

Aliases: I<abbreviations>

=cut

=head2 acc

    Array.acc()

Returns the

Aliases: I<accumulate>

=cut

=head2 acc_by

    Array.acc_by()

Returns the

Aliases: I<accumulate_by>

=cut

=head2 all

    Array.all()

Returns the

=cut

=head2 all_composite

    Array.all_composite()

Returns the

=cut

=head2 all_prime

    Array.all_prime()

Returns the

=cut

=head2 any

    Array.any()

Returns the

=cut

=head2 avg

    Array.avg()

Returns the

=cut

=head2 avg_by

    Array.avg_by()

Returns the

=cut

=head2 bindex

    Array.bindex()

Returns the

Aliases: I<bsearch_index>

=cut

=head2 bindex_by

    Array.bindex_by()

Returns the

Aliases: I<bsearch_index_by>

=cut

=head2 bindex_ge

    Array.bindex_ge()

Returns the

=cut

=head2 bindex_ge_by

    Array.bindex_ge_by()

Returns the

=cut

=head2 bindex_le

    Array.bindex_le()

Returns the

=cut

=head2 bindex_le_by

    Array.bindex_le_by()

Returns the

=cut

=head2 binsert

    Array.binsert()

Returns the

=cut

=head2 binsplit

    Array.binsplit()

Returns the

=cut

=head2 bsearch

    Array.bsearch()

Returns the

Aliases: I<bsearch_by>

=cut

=head2 bsearch_ge

    Array.bsearch_ge()

Returns the

Aliases: I<bsearch_ge_by>

=cut

=head2 bsearch_le

    Array.bsearch_le()

Returns the

Aliases: I<bsearch_le_by>

=cut

=head2 bshuffle

    Array.bshuffle()

Returns the

Aliases: I<best_shuffle>

=cut

=head2 cartesian

    Array.cartesian()

Returns the

=cut

=head2 cfrac2num

    Array.cfrac2num()

Returns the

=cut

=head2 change_to

    Array.change_to()

Returns the

=cut

=head2 chrs

    Array.chrs()

Returns the

Aliases: I<decode>, I<join_bytes>

=cut

=head2 circular_permutations

    Array.circular_permutations()

Returns the

=cut

=head2 clear

    Array.clear()

Returns the

=cut

=head2 collapse

    Array.collapse()

Returns the

=cut

=head2 combinations

    Array.combinations()

Returns the

=cut

=head2 combinations_with_repetition

    Array.combinations_with_repetition()

Returns the

=cut

=head2 combine

    Array.combine()

Returns the

=cut

=head2 compact

    Array.compact()

Returns the

=cut

=head2 cons

    Array.cons()

Returns the

Aliases: I<map_cons>

=cut

=head2 contains_all

    Array.contains_all()

Returns the

=cut

=head2 contains_any

    Array.contains_any()

Returns the

=cut

=head2 contains_type

    Array.contains_type()

Returns the

=cut

=head2 count

    Array.count()

Returns the

=cut

=head2 count_by

    Array.count_by()

Returns the

=cut

=head2 cross_op

    Array.cross_op()

Returns the

Aliases: I<cross_operator>

=cut

=head2 defined

    Array.defined()

Returns the

=cut

=head2 delete

    Array.delete()

Returns the

Aliases: I<remove>

=cut

=head2 delete_by

    Array.delete_by()

Returns the

Aliases: I<delete_if>, I<remove_by>, I<remove_if>

=cut

=head2 delete_first

    Array.delete_first()

Returns the

Aliases: I<remove_first>

=cut

=head2 delete_first_by

    Array.delete_first_by()

Returns the

Aliases: I<delete_first_if>, I<remove_first_by>, I<remove_first_if>

=cut

=head2 delete_last

    Array.delete_last()

Returns the

Aliases: I<remove_last>

=cut

=head2 delete_last_by

    Array.delete_last_by()

Returns the

Aliases: I<delete_last_if>, I<remove_last_by>, I<remove_last_if>

=cut

=head2 derangements

    Array.derangements()

Returns the

Aliases: I<complete_permutations>

=cut

=head2 det

    Array.det()

Returns the

Aliases: I<determinant>

=cut

=head2 det_bareiss

    Array.det_bareiss()

Returns the

=cut

=head2 diffs

    Array.diffs()

Returns the

Aliases: I<differences>, I<nth_differences>

=cut

=head2 dig

    Array.dig()

Returns the

=cut

=head2 digits2num

    Array.digits2num()

Returns the

Aliases: I<from_digits>

=cut

=head2 each_2d

    Array.each_2d()

Returns the

=cut

=head2 each_cons

    Array.each_cons()

Returns the

=cut

=head2 each_k

    Array.each_k()

Returns the

Aliases: I<each_key>, I<each_index>

=cut

=head2 each_kv

    Array.each_kv()

Returns the

=cut

=head2 each_slice

    Array.each_slice()

Returns the

=cut

=head2 end

    Array.end()

Returns the

Aliases: I<offset>

=cut

=head2 exists

    Array.exists()

Returns the

Aliases: I<has_index>

=cut

=head2 expand

    arr.expand { ... }

Recursively expand an array, given a block of code.

    say [1,[2,[3,4]],5].expand { _ }    #=> [1, 5, 2, 3, 4]

Aliases: I<expand_by>

=cut

=head2 extract_by

    Array.extract_by()

Returns the

=cut

=head2 extract_first_by

    Array.extract_first_by()

Returns the

=cut

=head2 extract_last_by

    Array.extract_last_by()

Returns the

=cut

=head2 fetch

    Array.fetch()

Returns the

=cut

=head2 find

    Array.find()

Returns the

Aliases: I<first_by>

=cut

=head2 flat

    Array.flat()

Returns the

Aliases: I<flatten>

=cut

=head2 flat_map

    Array.flat_map()

Returns the

=cut

=head2 flip

    Array.flip()

Returns the

Aliases: I<reverse>

=cut

=head2 for

    Array.for()

Returns the

Aliases: I<each>, I<foreach>

=cut

=head2 freq

    Array.freq()

Returns the

=cut

=head2 freq_by

    Array.freq_by()

Returns the

=cut

=head2 ft

    Array.ft()

Returns the

Aliases: I<slice>

=cut

=head2 gauss_jordan_invert

    Array.gauss_jordan_invert()

Returns the

=cut

=head2 gauss_jordan_solve

    Array.gauss_jordan_solve()

Returns the

=cut

=head2 gcd

    Array.gcd()

Returns the

=cut

=head2 gcd_by

    Array.gcd_by()

Returns the

=cut

=head2 gcud

    Array.gcud()

Returns the

=cut

=head2 gcud_by

    Array.gcud_by()

Returns the

=cut

=head2 getopt

    Array.getopt()

Returns the

=cut

=head2 grep

    Array.grep()

Returns the

Aliases: I<select>

=cut

=head2 grep_2d

    Array.grep_2d()

Returns the

=cut

=head2 grep_kv

    Array.grep_kv()

Returns the

Aliases: I<select_kv>

=cut

=head2 group

    Array.group()

Returns the

Aliases: I<group_by>

=cut

=head2 head

    Array.head()

Returns the

Aliases: I<first>

=cut

=head2 index

    Array.index()

Returns the

Aliases: I<index_by>, I<first_index>, I<first_index_by>

=cut

=head2 inject

    Array.inject()

Returns the

Aliases: I<reduce>

=cut

=head2 insert

    Array.insert()

Returns the

=cut

=head2 inv

    Array.inv()

Returns the

Aliases: I<invert>, I<inverse>

=cut

=head2 is_empty

    Array.is_empty()

Returns the

=cut

=head2 item

    Array.item()

Returns the

=cut

=head2 items

    Array.items()

Returns the

=cut

=head2 iter

    Array.iter()

Returns the

=cut

=head2 jaro_distance

    Array.jaro_distance()

Returns the

=cut

=head2 join

    Array.join()

Returns the

=cut

=head2 join_insert

    Array.join_insert()

Returns the

=cut

=head2 keys

    Array.keys()

Returns the

Aliases: I<indices>

=cut

=head2 keys_by

    Array.keys_by()

Returns the

Aliases: I<indices_by>

=cut

=head2 keys_of

    Array.keys_of()

Returns the

Aliases: I<indices_of>

=cut

=head2 kv

    Array.kv()

Returns the

Aliases: I<pairs>, I<zip_indices>

=cut

=head2 last

    Array.last()

Returns the

Aliases: I<tail>

=cut

=head2 last_by

    Array.last_by()

Returns the

=cut

=head2 last_uniq

    Array.last_uniq()

Returns the

Aliases: I<last_unique>

=cut

=head2 last_uniq_by

    Array.last_uniq_by()

Returns the

Aliases: I<last_unique_by>

=cut

=head2 lcm

    Array.lcm()

Returns the

=cut

=head2 lcm_by

    Array.lcm_by()

Returns the

=cut

=head2 len

    Array.len()

Returns the

Aliases: I<size>, I<length>

=cut

=head2 lev

    Array.lev()

Returns the

Aliases: I<leven>, I<levenshtein>

=cut

=head2 madd

    Array.madd()

Returns the

Aliases: I<matrix_add>

=cut

=head2 make

    Array.make()

Returns the

=cut

=head2 make_by

    Array.make_by()

Returns the

=cut

=head2 map

    Array.map()

Returns the

Aliases: I<collect>

=cut

=head2 map_2d

    Array.map_2d()

Returns the

=cut

=head2 map_kv

    Array.map_kv()

Returns the

Aliases: I<collect_kv>

=cut

=head2 map_op

    Array.map_op()

Returns the

Aliases: I<map_operator>

=cut

=head2 map_reduce

    Array.map_reduce()

Returns the

Aliases: I<reduce_map>

=cut

=head2 match

    Array.match()

Returns the

=cut

=head2 max

    Array.max()

Returns the

=cut

=head2 max_by

    Array.max_by()

Returns the

=cut

=head2 mdiv

    Array.mdiv()

Returns the

Aliases: I<matrix_div>

=cut

=head2 min

    Array.min()

Returns the

=cut

=head2 min_by

    Array.min_by()

Returns the

=cut

=head2 minmax

    Array.minmax()

Returns the

=cut

=head2 mmul

    Array.mmul()

Returns the

Aliases: I<matrix_mul>

=cut

=head2 msolve

    Array.msolve()

Returns the

Aliases: I<matrix_solve>

=cut

=head2 msub

    Array.msub()

Returns the

Aliases: I<matrix_sub>

=cut

=head2 new

    Array.new()

Returns the

Aliases: I<call>

=cut

=head2 next_permutation

    Array.next_permutation()

Returns the

=cut

=head2 none

    Array.none()

Returns the

=cut

=head2 nth_perm

    Array.nth_perm()

Returns the

Aliases: I<nth_permutation>

=cut

=head2 pack

    Array.pack()

Returns the

=cut

=head2 pair_map

    Array.pair_map()

Returns the

Aliases: I<pairmap>

=cut

=head2 pam_op

    Array.pam_op()

Returns the

Aliases: I<pam_operator>

=cut

=head2 part

    Array.part()

Returns the

Aliases: I<partition>

=cut

=head2 partitions

    Array.partitions()

Returns the

=cut

=head2 perm2num

    Array.perm2num()

Returns the

=cut

=head2 permutations

    Array.permutations()

Returns the

=cut

=head2 pick

    Array.pick()

Returns the

=cut

=head2 pop_at

    Array.pop_at()

Returns the

Aliases: I<delete_at>, I<delete_index>

=cut

=head2 pop_rand

    Array.pop_rand()

Returns the

=cut

=head2 pop_while

    Array.pop_while()

Returns the

=cut

=head2 prepend

    Array.prepend()

Returns the

Aliases: I<unshift>

=cut

=head2 prod

    Array.prod()

Returns the

=cut

=head2 prod_2d

    Array.prod_2d()

Returns the

=cut

=head2 prod_by

    Array.prod_by()

Returns the

=cut

=head2 prod_kv

    Array.prod_kv()

Returns the

=cut

=head2 rand

    Array.rand()

Returns the

Aliases: I<sample>

=cut

=head2 rand_perm

    Array.rand_perm()

Returns the

Aliases: I<random_permutation>

=cut

=head2 range

    Array.range()

Returns the

=cut

=head2 recmap

    a.recmap { ... }

Recursively map the value of an array, given a block of code.

    # Generate all the 5-smooth numbers <= 20
    var (a, k, L) = ([1], 5, 20)
    k.primes.each {|p| a.recmap! {|n| n*p <= L ? [n*p] : () } }
    say a.sort    #=> [1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20]

=cut

=head2 reduce_op

    Array.reduce_op()

Returns the

Aliases: I<reduce_operator>

=cut

=head2 resize

    Array.resize()

Returns the

Aliases: I<resize_to>

=cut

=head2 rindex

    Array.rindex()

Returns the

Aliases: I<rindex_by>, I<last_index>, I<last_index_by>

=cut

=head2 rotate

    Array.rotate()

Returns the

=cut

=head2 rref

    Array.rref()

Returns the

Aliases: I<reduced_row_echelon_form>

=cut

=head2 rscalar_op

    Array.rscalar_op()

Returns the

Aliases: I<rscalar_operator>

=cut

=head2 run_length

    Array.run_length()

Returns the

Aliases: I<run_length_by>

=cut

=head2 sadd

    Array.sadd()

Returns the

Aliases: I<scalar_add>

=cut

=head2 scalar_op

    Array.scalar_op()

Returns the

Aliases: I<scalar_operator>

=cut

=head2 sdiv

    Array.sdiv()

Returns the

Aliases: I<scalar_div>

=cut

=head2 segment

    Array.segment()

Returns the

=cut

=head2 segment_by

    Array.segment_by()

Returns the

=cut

=head2 shift

    Array.shift()

Returns the

Aliases: I<drop_left>, I<drop_first>

=cut

=head2 shift_while

    Array.shift_while()

Returns the

=cut

=head2 shuffle

    Array.shuffle()

Returns the

=cut

=head2 slice_after

    Array.slice_after()

Returns the

=cut

=head2 slice_before

    Array.slice_before()

Returns the

=cut

=head2 slices

    Array.slices()

Returns the

Aliases: I<map_slice>

=cut

=head2 smul

    Array.smul()

Returns the

Aliases: I<scalar_mul>

=cut

=head2 solve_seq

    Array.solve_seq()

Returns the

=cut

=head2 sort

    Array.sort()

Returns the

=cut

=head2 sort_by

    Array.sort_by()

Returns the

=cut

=head2 splice

    Array.splice()

Returns the

=cut

=head2 split

    Array.split()

Returns the

=cut

=head2 split_by

    Array.split_by()

Returns the

=cut

=head2 ssub

    Array.ssub()

Returns the

Aliases: I<scalar_sub>

=cut

=head2 stack

    Array.stack()

Returns the

Aliases: I<stack_by>

=cut

=head2 subsets

    Array.subsets()

Returns the

=cut

=head2 sum

    Array.sum()

Returns the

=cut

=head2 sum_2d

    Array.sum_2d()

Returns the

=cut

=head2 sum_by

    Array.sum_by()

Returns the

=cut

=head2 sum_kv

    Array.sum_kv()

Returns the

=cut

=head2 swap

    Array.swap()

Returns the

=cut

=head2 take_left

    Array.take_left()

Returns the

=cut

=head2 take_right

    Array.take_right()

Returns the

=cut

=head2 to_a

    Array.to_a()

Returns the

Aliases: I<to_array>

=cut

=head2 to_bag

    Array.to_bag()

Returns the

=cut

=head2 to_h

    Array.to_h()

Returns the

Aliases: I<to_hash>

=cut

=head2 to_m

    Array.to_m()

Returns the

Aliases: I<to_matrix>

=cut

=head2 to_s

    Array.to_s()

Returns the

Aliases: I<dump>, I<to_str>

=cut

=head2 to_set

    Array.to_set()

Returns the

=cut

=head2 to_v

    Array.to_v()

Returns the

Aliases: I<to_vector>

=cut

=head2 tuples

    Array.tuples()

Returns the

Aliases: I<variations>

=cut

=head2 tuples_with_repetition

    Array.tuples_with_repetition()

Returns the

Aliases: I<variations_with_repetition>

=cut

=head2 uniq

    Array.uniq()

Returns the

Aliases: I<unique>, I<distinct>

=cut

=head2 uniq_by

    Array.uniq_by()

Returns the

Aliases: I<unique_by>

=cut

=head2 uniq_permutations

    Array.uniq_permutations()

Returns the

Aliases: I<unique_permutations>

=cut

=head2 uniq_prefs

    Array.uniq_prefs()

Returns the

Aliases: I<unique_prefixes>

=cut

=head2 unroll_op

    Array.unroll_op()

Returns the

Aliases: I<unroll_operator>

=cut

=head2 unzip_by

    Array.unzip_by()

Returns the

=cut

=head2 weighted_shuffle_by

    Array.weighted_shuffle_by()

Returns the

=cut

=head2 wise_op

    Array.wise_op()

Returns the

Aliases: I<wise_operator>

=cut

=head2 zip

    Array.zip()

Returns the

Aliases: I<transpose>

=cut

=head2 zip_by

    Array.zip_by()

Returns the

=cut

=head2 zip_op

    Array.zip_op()

Returns the

Aliases: I<zip_operator>

=cut
