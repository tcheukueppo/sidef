
=encoding utf8

=head1 NAME

Sidef::Types::String::String

=head1 DESCRIPTION

This class implements ...

=head1 SYNOPSIS

var obj = String(...)


=head1 INHERITS

Inherits methods from:

       * Sidef::Object::Object

=head1 METHODS

=head2 %

    a % b

Returns the

Aliases: I<sprintf>

=cut

=head2 &

    a & b

Returns the

Aliases: I<and>

=cut

=head2 *

    a * b

Returns the

Aliases: I<mul>

=cut

=head2 +

    a + b

Returns the

Aliases: I<add>, I<append>, I<concat>

=cut

=head2 ++

    a ++ b

Returns the

Aliases: I<inc>

=cut

=head2 -

    a - b

Returns the

Aliases: I<diff>

=cut

=head2 ..

    a .. b

Returns the

Aliases: I<to>, I<upto>

=cut

=head2 /

    a / b

Returns the

Aliases: I<÷>, I<div>

=cut

=head2 <

    a < b

Returns the

Aliases: I<lt>

=cut

=head2 <<

    a << b

Returns the

Aliases: I<drop_left>, I<shift_left>

=cut

=head2 <=>

    a <=> b

Returns the

Aliases: I<cmp>

=cut

=head2 ==

    a == b

Returns the

Aliases: I<eq>

=cut

=head2 =~

    a =~ b

Returns the

Aliases: I<match>

=cut

=head2 >

    a > b

Returns the

Aliases: I<gt>

=cut

=head2 >>

    a >> b

Returns the

Aliases: I<drop_right>, I<shift_right>

=cut

=head2 ^

    a ^ b

Returns the

Aliases: I<xor>

=cut

=head2 |

    a | b

Returns the

Aliases: I<or>

=cut

=head2 ~

    a ~ b

Returns the

Aliases: I<not>

=cut

=head2 ≠

    a ≠ b

Returns the

Aliases: I<!=>, I<ne>

=cut

=head2 ≤

    a ≤ b

Returns the

Aliases: I<E<lt>=>, I<le>

=cut

=head2 ≥

    a ≥ b

Returns the

Aliases: I<E<gt>=>, I<ge>

=cut

=head2 apply_escapes

    self.apply_escapes(parser)

Returns the

=cut

=head2 ascii2bin

    self.ascii2bin

Returns the

=cut

=head2 ascii2bits

    self.ascii2bits

Returns the

=cut

=head2 backtick

    self.backtick

Returns the

=cut

=head2 base64_decode

    self.base64_decode

Returns the

Aliases: I<decode_base64>

=cut

=head2 base64_encode

    self.base64_encode

Returns the

Aliases: I<encode_base64>

=cut

=head2 begins_with

    self.begins_with(string)

Returns the

Aliases: I<starts_with>

=cut

=head2 bin

    self.bin

Returns the

=cut

=head2 bin2ascii

    self.bin2ascii

Returns the

=cut

=head2 bytes

    self.bytes

Returns the

=cut

=head2 bytes_len

    self.bytes_len

Returns the

Aliases: I<bytes_length>

=cut

=head2 center

    self.center(size, char)

Returns the

=cut

=head2 char

    self.char(pos)

Returns the

Aliases: I<char_at>

=cut

=head2 chars

    self.chars

Returns the

=cut

=head2 chomp

    self.chomp

Returns the

=cut

=head2 chop

    self.chop

Returns the

=cut

=head2 clear

    self.clear

Returns the

=cut

=head2 collect

    self.collect(regex)

Returns the

Aliases: I<find_all>, I<findall>

=cut

=head2 count

    self.count(arg)

Returns the

=cut

=head2 crypt

    self.crypt(salt)

Returns the

=cut

=head2 decode

    self.decode(enc)

Returns the

=cut

=head2 decode_utf8

    self.decode_utf8

Returns the

=cut

=head2 deflate

    self.deflate

Returns the

=cut

=head2 die

    self.die

Returns the

=cut

=head2 digits

    self.digits

Returns the

=cut

=head2 downto

    from.downto(to, step)

Returns the

=cut

=head2 dump

    self.dump

Returns the

Aliases: I<inspect>

=cut

=head2 each

    self.each(code)

Returns the

Aliases: I<each_char>

=cut

=head2 each_byte

    self.each_byte(code)

Returns the

=cut

=head2 each_graph

    self.each_graph(code)

Returns the

Aliases: I<each_grapheme>

=cut

=head2 each_line

    self.each_line(code)

Returns the

=cut

=head2 each_num

    self.each_num(code)

Returns the

Aliases: I<each_number>

=cut

=head2 each_word

    self.each_word(code)

Returns the

=cut

=head2 encode

    self.encode(enc)

Returns the

=cut

=head2 encode_utf8

    self.encode_utf8

Returns the

=cut

=head2 ends_with

    self.ends_with(string)

Returns the

=cut

=head2 escape

    self.escape

Returns the

Aliases: I<quotemeta>

=cut

=head2 esub

    self.esub(regex, code)

Returns the

=cut

=head2 extract_bracketed

    self.extract_bracketed(brackets)

Returns the

=cut

=head2 extract_codeblock

    self.extract_codeblock(delim)

Returns the

=cut

=head2 extract_delimited

    self.extract_delimited(delim)

Returns the

=cut

=head2 extract_quotelike

    self.extract_quotelike

Returns the

=cut

=head2 extract_tagged

    self.extract_tagged

Returns the

=cut

=head2 fc

    self.fc

Returns the

Aliases: I<foldcase>

=cut

=head2 first

    self.first(num)

Returns the

=cut

=head2 flip

    self.flip

Returns the

Aliases: I<reverse>

=cut

=head2 format

    self.format

Returns the

=cut

=head2 frequire

    self.frequire

Returns the

=cut

=head2 ft

    self.ft(from, to)

Returns the

Aliases: I<slice>

=cut

=head2 gesub

    self.gesub(regex, code)

Returns the

=cut

=head2 glob

    self.glob

Returns the

=cut

=head2 gmatch

    self.gmatch(regex, pos)

Returns the

=cut

=head2 graphs

    self.graphs

Returns the

Aliases: I<graphemes>

=cut

=head2 graphs_len

    self.graphs_len

Returns the

Aliases: I<graphs_length>

=cut

=head2 gsub

    self.gsub(regex, str)

Returns the

Aliases: I<replace_all>

=cut

=head2 gunzip

    self.gunzip

Returns the

=cut

=head2 gzip

    self.gzip

Returns the

=cut

=head2 has

    self.has(arg, start_pos)

Returns the

Aliases: I<contain>, I<include>, I<contains>, I<includes>

=cut

=head2 hex

    self.hex

Returns the

=cut

=head2 hex2ascii

    self.hex2ascii

Returns the

Aliases: I<unhexlify>

=cut

=head2 hexlify

    self.hexlify

Returns the

Aliases: I<ascii2hex>

=cut

=head2 index

    self.index(substr, pos)

Returns the

=cut

=head2 inflate

    self.inflate

Returns the

=cut

=head2 insert

    self.insert(string, pos, len)

Returns the

=cut

=head2 ints

    self.ints

Returns the

Aliases: I<integers>

=cut

=head2 is_alnum

    self.is_alnum

Returns the

Aliases: I<is_alphanum>

=cut

=head2 is_alpha

    self.is_alpha

Returns the

=cut

=head2 is_ascii

    self.is_ascii

Returns the

=cut

=head2 is_digit

    self.is_digit

Returns the

=cut

=head2 is_empty

    self.is_empty

Returns the

=cut

=head2 is_lc

    self.is_lc

Returns the

Aliases: I<is_lowercase>

=cut

=head2 is_numeric

    self.is_numeric

Returns the

Aliases: I<looks_like_number>

=cut

=head2 is_palindrome

    self.is_palindrome

Returns the

=cut

=head2 is_punct

    self.is_punct

Returns the

Aliases: I<is_punctuation>

=cut

=head2 is_space

    self.is_space

Returns the

=cut

=head2 is_uc

    self.is_uc

Returns the

Aliases: I<is_uppercase>

=cut

=head2 is_word

    self.is_word

Returns the

=cut

=head2 iter

    self.iter

Returns the

=cut

=head2 jaro_distance

    s.jaro_distance(t, winkler)

Returns the

=cut

=head2 join

    self.join(*rest)

Returns the

=cut

=head2 last

    self.last(num)

Returns the

=cut

=head2 lc

    self.lc

Returns the

Aliases: I<lower>, I<downcase>

=cut

=head2 lcfirst

    self.lcfirst

Returns the

=cut

=head2 len

    self.len

Returns the

Aliases: I<size>, I<length>, I<chars_len>, I<chars_length>

=cut

=head2 lev

    self.lev(arg)

Returns the

Aliases: I<leven>, I<levenshtein>

=cut

=head2 lines

    self.lines

Returns the

=cut

=head2 ltrim

    self.ltrim(arg)

Returns the

Aliases: I<lstrip>, I<trim_beg>, I<strip_beg>, I<trim_left>, I<strip_left>

=cut

=head2 md5

    self.md5

Returns the

=cut

=head2 new

    self.new

Returns the

Aliases: I<call>

=cut

=head2 num

    self.num(base)

Returns the

Aliases: I<to_n>, I<to_num>

=cut

=head2 nums

    self.nums

Returns the

Aliases: I<numbers>

=cut

=head2 oct

    self.oct

Returns the

=cut

=head2 open

    self.open(*rest)

Returns the

=cut

=head2 open_r

    self.open_r(*rest)

Returns the

=cut

=head2 ord

    self.ord

Returns the

=cut

=head2 overlaps

    self.overlaps(arg)

Returns the

=cut

=head2 pack

    self.pack(*list)

Returns the

=cut

=head2 parse_quotewords

    self.parse_quotewords(delim, keep)

Returns the

=cut

=head2 pipe

    self.pipe

Returns the

=cut

=head2 pop

    self.pop

Returns the

=cut

=head2 prepend

    self.prepend(string)

Returns the

=cut

=head2 printf

    self.printf(*arguments)

Returns the

=cut

=head2 printlnf

    self.printlnf(*arguments)

Returns the

=cut

=head2 range

    from.range(to, step)

Returns the

=cut

=head2 repeat

    self.repeat(num)

Returns the

=cut

=head2 require

    self.require

Returns the

=cut

=head2 rindex

    self.rindex(substr, pos)

Returns the

=cut

=head2 rotate

    self.rotate(n)

Returns the

=cut

=head2 rtrim

    self.rtrim(arg)

Returns the

Aliases: I<rstrip>, I<trim_end>, I<strip_end>, I<trim_right>, I<strip_right>

=cut

=head2 run

    method.run(self, *args)

Returns the

=cut

=head2 scan

    self.scan(regex)

Returns the

=cut

=head2 sha1

    self.sha1

Returns the

=cut

=head2 sha256

    self.sha256

Returns the

=cut

=head2 sha512

    self.sha512

Returns the

=cut

=head2 slices

    self.slices(n)

Returns the

=cut

=head2 sort

    self.sort(block)

Returns the

=cut

=head2 split

    self.split(sep, size)

Returns the

=cut

=head2 sprintlnf

    self.sprintlnf(*arguments)

Returns the

=cut

=head2 sub

    self.sub(regex, str)

Returns the

Aliases: I<replace>

=cut

=head2 substr

    self.substr(offs, len)

Returns the

Aliases: I<substring>

=cut

=head2 tc

    self.tc

Returns the

Aliases: I<ucfirst>, I<titlecase>

=cut

=head2 tclc

    self.tclc

Returns the

Aliases: I<capitalize>

=cut

=head2 to_i

    self.to_i

Returns the

Aliases: I<to_int>

=cut

=head2 to_s

    self.to_s

Returns the

Aliases: I<to_str>

=cut

=head2 tr

    self.tr(orig, repl, modes)

Returns the

Aliases: I<translit>

=cut

=head2 trans

    self.trans(orig, repl)

Returns the

=cut

=head2 trim

    self.trim(arg)

Returns the

Aliases: I<strip>

=cut

=head2 uc

    self.uc

Returns the

Aliases: I<upper>, I<upcase>

=cut

=head2 unescape

    self.unescape

Returns the

=cut

=head2 unpack

    self.unpack(arg)

Returns the

=cut

=head2 use

    self.use

Returns the

=cut

=head2 warn

    self.warn

Returns the

=cut

=head2 wc

    self.wc

Returns the

Aliases: I<wordcase>

=cut

=head2 words

    self.words

Returns the

=cut
